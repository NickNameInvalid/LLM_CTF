stored_password = [-0x37, 0xd9, 0xcb, 0xdd, 0xc9, 0xde, 0xcc, 0xd1, 0x9a, 0xc4, 0xcf,
                   0xf5, 0xd9, 0xc2, 0xcf, 0xcf, 0xfa, 0xf5, 0x9b, 0xdd, 0xc5, 0xf5,
                   0xd9, 0xc2, 0xcf, 0xfd, 0xda, 0xf5, 0x98, 0xc2, 0xd8, 0xcf, 0xcf,
                   0xf5, 0x9f, 0xc2, 0xcf, 0xcf, 0xc1, 0xd9, 0xf5, 0xf5, 0xf5, 0xf5,
                   0xd0, 0xf5, 0xf5, 0xf5, 0xd0, 0xd0, 0xd0, 0xf5, 0xf5, 0xf5, 0xf5,
                   0xf5, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xd0, 0xf5, 0xf5, 0xf5, 0xf5,
                   0xd2, 0xc5, 0xd8, 0xd7]
key = 0xaa

original_password = ""
for byte in stored_password:
    byte_xor_key = byte ^ key  # Perform XOR first
    if byte_xor_key >= 0:
        original_char = chr(byte_xor_key)
        original_password += original_char
    else:
        # Handle the first character specifically (assuming it's the issue)
        if byte == -0x37:
            original_password += "c"  # Replace the invalid character with the expected first letter
        else:
            print("Invalid character encountered:", byte_xor_key)

print("Original password:", original_password)
