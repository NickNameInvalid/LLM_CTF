Below is a question in CTF, called "rox". Help me solve it. Either directly derive the flag from the code, or write a python 
script to call on the executable file “./food”, with the correct input, that leads to the print of the flag. 
I hereby provide the question description, and the decompiled C code.

Description:
This challenge primarily involves significant xoring of some data with the goal of getting a password which can open a file. None of the flags can open the file but the final one needs to be password matched to be continued.
Also this was compiled on GCC in FreeBSD so dynamic analysis would probably need a VM or some compatibility layer. You can open this up statically though.


Decompiled Code:
void verify(basic_string param_1)

{
  byte bVar1;
  byte bVar2;
  char cVar3;
  undefined4 uVar4;
  int iVar5;
  ulong uVar6;
  int *piVar7;
  undefined4 *puVar8;
  byte *pbVar9;
  time_t tVar10;
  char *pcVar11;
  basic_ostream *pbVar12;
  ulong uVar13;
  undefined4 in_register_0000003c;
  basic_string<> local_d8 [32];
  vector<> local_b8 [32];
  allocator local_98;
  undefined local_97;
  undefined local_96;
  undefined local_95;
  undefined local_94;
  undefined local_93;
  undefined local_92;
  undefined local_91;
  undefined local_90;
  undefined local_8f;
  undefined local_8e;
  undefined local_8d;
  undefined local_8c;
  undefined local_8b;
  undefined local_8a;
  undefined local_89;
  undefined local_88;
  undefined local_87;
  undefined local_86;
  undefined local_85;
  undefined local_84;
  undefined local_83;
  undefined local_82;
  undefined local_81;
  undefined local_80;
  undefined local_7f;
  undefined local_7e;
  undefined local_7d;
  undefined local_7c;
  undefined local_7b;
  undefined local_7a;
  undefined local_79;
  undefined local_78;
  undefined local_77;
  undefined local_76;
  undefined local_75;
  undefined local_74;
  undefined local_73;
  undefined local_72;
  undefined local_71;
  undefined local_70;
  undefined local_6f;
  undefined local_6e;
  undefined local_6d;
  undefined local_6c;
  undefined local_6b;
  undefined local_6a;
  undefined local_69;
  undefined local_68;
  undefined local_67;
  undefined local_66;
  undefined local_65;
  undefined local_64;
  undefined local_63;
  undefined local_62;
  undefined local_61;
  undefined local_60;
  undefined local_5f;
  undefined local_5e;
  undefined local_5d;
  undefined local_5c;
  undefined local_5b;
  undefined local_5a;
  undefined local_59;
  undefined local_58;
  undefined local_57;
  undefined local_56;
  undefined local_55;
  undefined local_54;
  undefined local_53;
  undefined local_52;
  undefined local_51;
  undefined local_50;
  undefined local_4f;
  allocator<> local_42;
  allocator local_41;
  int local_40;
  int local_3c;
  int local_38;
  int local_34;
  int local_30;
  int local_2c;
  
  local_98 = (allocator)0x3f;
  local_97 = 0x42;
  local_96 = 0x38;
  local_95 = 0x5f;
  local_94 = 0x7a;
  local_93 = 0x57;
  local_92 = 0x71;
  local_91 = 0x74;
  local_90 = 0x66;
  local_8f = 0x44;
  local_8e = 0x47;
  local_8d = 0x32;
  local_8c = 0x3d;
  local_8b = 0x16;
  local_8a = 99;
  local_89 = 0x1f;
  local_88 = 0x12;
  local_87 = 0x1a;
  local_86 = 0x12;
  local_85 = 0x5c;
  local_84 = 0x2a;
  local_83 = 3;
  local_82 = 100;
  local_81 = 0x1c;
  local_80 = 0x15;
  local_7f = 0x40;
  local_7e = 1;
  local_7d = 0x3f;
  local_7c = 0x4c;
  local_7b = 2;
  local_7a = 0x3a;
  local_79 = 0x30;
  local_78 = 0x1d;
  local_77 = 0x7c;
  local_76 = 0x69;
  local_75 = 0x4d;
  local_74 = 0x19;
  local_73 = 0x5f;
  local_72 = 0x48;
  local_71 = 0x5e;
  local_70 = 0x20;
  local_6f = 3;
  local_6e = 0x17;
  local_6d = 9;
  local_6c = 0x52;
  local_6b = 0x6b;
  local_6a = 0x4c;
  local_69 = 0x65;
  local_68 = 0x6f;
  local_67 = 0x48;
  local_66 = 6;
  local_65 = 0x5b;
  local_64 = 0x2b;
  local_63 = 0x28;
  local_62 = 0x40;
  local_61 = 0x2e;
  local_60 = 0x4e;
  local_5f = 0xb;
  local_5e = 0x16;
  local_5d = 0x31;
  local_5c = 0x30;
  local_5b = 0x56;
  local_5a = 0x21;
  local_59 = 0x6e;
  local_58 = 0x2d;
  local_57 = 0x30;
  local_56 = 0x4b;
  local_55 = 0x1c;
  local_54 = 0x10;
  local_53 = 4;
  local_52 = 0x3f;
  local_51 = 0x18;
  local_50 = 0x41;
  local_4f = 0x34;
  std::allocator<>::allocator();
                    /* try { // try from 00401b54 to 00401b58 has its CatchHandler @ 00401f04 */
  std::vector<>::vector((initializer_list)local_b8,&local_98);
  std::allocator<>::~allocator(&local_42);
  local_2c = 0;
  while( true ) {
    uVar13 = (ulong)local_2c;
    uVar6 = std::__cxx11::basic_string<>::size();
    if (uVar6 <= uVar13) break;
    pbVar9 = (byte *)std::vector<>::operator[](local_b8,(long)local_2c);
    bVar2 = *pbVar9;
                    /* try { // try from 00401b9e to 00401c8b has its CatchHandler @ 00401f43 */
    pbVar9 = (byte *)std::__cxx11::basic_string<>::operator[]
                               (CONCAT44(in_register_0000003c,param_1));
    bVar1 = *pbVar9;
    pbVar9 = (byte *)std::vector<>::operator[](local_b8,(long)local_2c);
    *pbVar9 = bVar1 ^ bVar2;
    local_2c = local_2c + 1;
  }
  local_30 = 0;
  while( true ) {
    uVar13 = (ulong)local_30;
    uVar6 = std::vector<>::size();
    if (uVar6 <= uVar13) break;
    pbVar9 = (byte *)std::vector<>::operator[](local_b8,(long)local_30);
    bVar2 = *pbVar9;
    iVar5 = local_30 * 10;
    uVar6 = std::vector<>::size();
    piVar7 = (int *)std::vector<>::operator[]((vector<> *)data,(ulong)(long)(iVar5 + 0xc) % uVar6);
    iVar5 = *piVar7;
    std::__cxx11::basic_string<>::size();
    pcVar11 = (char *)std::__cxx11::basic_string<>::operator[]
                                (CONCAT44(in_register_0000003c,param_1));
    cVar3 = *pcVar11;
    uVar6 = std::vector<>::size();
    puVar8 = (undefined4 *)
             std::vector<>::operator[]((vector<> *)data,(ulong)(long)(cVar3 + iVar5) % uVar6);
    uVar4 = *puVar8;
    pbVar9 = (byte *)std::vector<>::operator[](local_b8,(long)local_30);
    *pbVar9 = (byte)uVar4 ^ bVar2;
    local_30 = local_30 + 1;
  }
  local_34 = 5;
  while( true ) {
    uVar13 = (ulong)local_34;
    uVar6 = std::vector<>::size();
    if (uVar6 <= uVar13) break;
    for (local_38 = 0; local_38 < 300; local_38 = local_38 + 1) {
      pbVar9 = (byte *)std::vector<>::operator[](local_b8,(long)local_34);
      bVar2 = *pbVar9;
      iVar5 = local_38 << 5;
      pcVar11 = (char *)std::vector<>::operator[](local_b8,(long)(local_34 + -5));
      cVar3 = *pcVar11;
      pbVar9 = (byte *)std::vector<>::operator[](local_b8,(long)local_34);
      *pbVar9 = cVar3 == 'n' ^ bVar2 ^ (byte)iVar5;
    }
    local_34 = local_34 + 1;
  }
  std::allocator<char>::allocator();
                    /* try { // try from 00401ddb to 00401ddf has its CatchHandler @ 00401f1e */
  std::__cxx11::basic_string<>::basic_string<>
            (local_d8,"flag{ph3w...u finaLly g0t it! jump into cell wHen U g3t t0 the next cha11}",
             &local_41);
  std::allocator<char>::~allocator((allocator<char> *)&local_41);
  tVar10 = time((time_t *)0x0);
  srand((uint)tVar10);
  local_3c = 0;
  do {
    uVar13 = (ulong)local_3c;
    uVar6 = std::__cxx11::basic_string<>::size();
    if (uVar6 <= uVar13) {
      pbVar12 = std::operator<<((basic_ostream *)std::cout,"You are worthy!");
      std::basic_ostream<>::operator<<((basic_ostream<> *)pbVar12,std::endl<>);
LAB_00401ee4:
      std::__cxx11::basic_string<>::~basic_string(local_d8);
      std::vector<>::~vector(local_b8);
      return;
    }
                    /* try { // try from 00401e1c to 00401ee2 has its CatchHandler @ 00401f2f */
    pcVar11 = (char *)std::__cxx11::basic_string<>::operator[]((ulong)local_d8);
    cVar3 = *pcVar11;
    pcVar11 = (char *)std::vector<>::operator[](local_b8,(long)local_3c);
    if (cVar3 != *pcVar11) {
      local_40 = rand();
      pbVar12 = std::operator<<((basic_ostream *)std::cout,fail_msgs + (long)(local_40 % 6) * 0x80);
      std::basic_ostream<>::operator<<((basic_ostream<> *)pbVar12,std::endl<>);
      goto LAB_00401ee4;
    }
    local_3c = local_3c + 1;
  } while( true );
}

bool main(int param_1,char **param_2)

{
  basic_ostream *pbVar1;
  basic_string<> local_68 [47];
  allocator local_39;
  basic_string local_38 [10];
  
  if (param_1 < 2) {
    pbVar1 = std::operator<<((basic_ostream *)std::cout,"Usage: ");
    pbVar1 = std::operator<<(pbVar1,*param_2);
    pbVar1 = std::operator<<(pbVar1," <food>");
    std::basic_ostream<>::operator<<((basic_ostream<> *)pbVar1,std::endl<>);
  }
  else {
    std::allocator<char>::allocator();
                    /* try { // try from 00401ff1 to 00401ff5 has its CatchHandler @ 00402040 */
    std::__cxx11::basic_string<>::basic_string<>(local_68,param_2[1],&local_39);
    std::allocator<char>::~allocator((allocator<char> *)&local_39);
                    /* try { // try from 00402010 to 00402014 has its CatchHandler @ 0040206b */
    std::__cxx11::basic_string<>::basic_string(local_38);
                    /* try { // try from 0040201c to 00402020 has its CatchHandler @ 0040205a */
    verify((basic_string)local_38);
    std::__cxx11::basic_string<>::~basic_string((basic_string<> *)local_38);
    std::__cxx11::basic_string<>::~basic_string(local_68);
  }
  return param_1 < 2;
}

