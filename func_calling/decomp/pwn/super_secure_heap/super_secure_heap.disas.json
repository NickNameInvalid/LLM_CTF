{
  "fflush": "; int fflush(FILE * __stream)\n; Parameters:\n; __stream       FILE *         RDI\n; Stack variables:\n                                  fflush:\n.plt.sec:00101170 f30f1efa             ENDBR64\n.plt.sec:00101174 f2ff25454e0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::fflush]             ; int fflush(FILE * __stream)\n; int fflush(FILE * __stream)\n; Parameters:\n; __stream       FILE *         RDI\n; Stack variables:\n                                  ; fflush@@GLIBC_2.2.5\n                                  fflush:\nEXTERNAL:00107058                      ??          ??\n",
  "setvbuf": "; int setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n; Parameters:\n; __stream       FILE *         RDI\n; __buf          char *         RSI\n; __modes        int            EDX\n; __n            size_t         RCX\n; Stack variables:\n                                  setvbuf:\n.plt.sec:00101190 f30f1efa             ENDBR64\n.plt.sec:00101194 f2ff25354e0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::setvbuf]            ; int setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n; int setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n; Parameters:\n; __stream       FILE *         RDI\n; __buf          char *         RSI\n; __modes        int            EDX\n; __n            size_t         RCX\n; Stack variables:\n                                  ; setvbuf@@GLIBC_2.2.5\n                                  setvbuf:\nEXTERNAL:00107068                      ??          ??\n",
  "__libc_csu_init": "; undefined __libc_csu_init()\n; Parameters:\n; Stack variables:\n                                  __libc_csu_init:\n.text:00102050   f30f1efa             ENDBR64\n.text:00102054   4157                 PUSH        R15\n.text:00102056   4c8d3d0b3d0000       LEA         R15,[__frame_dummy_init_array_entry]         ; \u003d 00101280\n.text:0010205d   4156                 PUSH        R14\n.text:0010205f   4989d6               MOV         R14,RDX\n.text:00102062   4155                 PUSH        R13\n.text:00102064   4989f5               MOV         R13,RSI\n.text:00102067   4154                 PUSH        R12\n.text:00102069   4189fc               MOV         R12D,EDI\n.text:0010206c   55                   PUSH        RBP\n.text:0010206d   488d2dfc3c0000       LEA         RBP,[__do_global_dtors_aux_fini_array_entry]     ; \u003d 00101240\n.text:00102074   53                   PUSH        RBX\n.text:00102075   4c29fd               SUB         RBP,R15\n.text:00102078   4883ec08             SUB         RSP,0x8\n.text:0010207c   e87fefffff           CALL        _init                                        ; int _init(EVP_PKEY_CTX * ctx)\n.text:00102081   48c1fd03             SAR         RBP,0x3\n.text:00102085   741f                 JZ          LAB_001020a6\n.text:00102087   31db                 XOR         EBX,EBX\n.text:00102089   0f1f8000000000       NOP         dword ptr [RAX]\n                                  LAB_00102090:\n.text:00102090   4c89f2               MOV         RDX,R14\n.text:00102093   4c89ee               MOV         RSI,R13\n.text:00102096   4489e7               MOV         EDI,R12D\n.text:00102099   41ff14df             CALL        qword ptr [R15 + RBX*0x8]\u003d\u003e-\u003eframe_dummy     ; undefined __do_global_dtors_aux(), undefined frame_dummy(), \u003d 00101280, \u003d 00101240\n.text:0010209d   4883c301             ADD         RBX,0x1\n.text:001020a1   4839dd               CMP         RBP,RBX\n.text:001020a4   75ea                 JNZ         LAB_00102090\n                                  LAB_001020a6:\n.text:001020a6   4883c408             ADD         RSP,0x8\n.text:001020aa   5b                   POP         RBX\n.text:001020ab   5d                   POP         RBP\n.text:001020ac   415c                 POP         R12\n.text:001020ae   415d                 POP         R13\n.text:001020b0   415e                 POP         R14\n.text:001020b2   415f                 POP         R15\n.text:001020b4   c3                   RET\n",
  "_init": "; int __stdcall _init(EVP_PKEY_CTX * ctx)\n; Parameters:\n; ctx            EVP_PKEY_CTX * RDI\n; Stack variables:\n                                  _init:\n.init:00101000   f30f1efa             ENDBR64\n.init:00101004   4883ec08             SUB         RSP,0x8\n.init:00101008   488b05d94f0000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::__gmon_start__,qword ptr [-\u003e\u003cEXTERNAL\u003e::__gmon_start__]     ; \u003d ??, \u003d 00107048\n.init:0010100f   4885c0               TEST        RAX,RAX\n.init:00101012   7402                 JZ          LAB_00101016\n.init:00101014   ffd0                 CALL        RAX\u003d\u003e\u003cEXTERNAL\u003e::__gmon_start__              ; undefined __gmon_start__()\n                                  LAB_00101016:\n.init:00101016   4883c408             ADD         RSP,0x8\n.init:0010101a   c3                   RET\n",
  "_start": "; undefined processEntry _start()\n; Parameters:\n; Stack variables:\n; local_10       undefined8     -0x10\n                                  _start:\n.text:001011a0   f30f1efa             ENDBR64\n.text:001011a4   31ed                 XOR         EBP,EBP\n.text:001011a6   4989d1               MOV         R9,RDX\n.text:001011a9   5e                   POP         RSI\n.text:001011aa   4889e2               MOV         RDX,RSP\n.text:001011ad   4883e4f0             AND         RSP,-0x10\n.text:001011b1   50                   PUSH        RAX\n.text:001011b2   54                   PUSH        RSP\u003d\u003elocal_10\n.text:001011b3   4c8d05060f0000       LEA         R8,[__libc_csu_fini]\n.text:001011ba   488d0d8f0e0000       LEA         RCX,[__libc_csu_init]\n.text:001011c1   488d3dee0d0000       LEA         RDI,[main]\n.text:001011c8   ff15124e0000         CALL        qword ptr [-\u003e\u003cEXTERNAL\u003e::__libc_start_main]     ; undefined __libc_start_main(), \u003d 00107038\n.text:001011ce   f4                   HLT\n",
  "finalMessage": "; undefined finalMessage()\n; Parameters:\n; Stack variables:\n; local_28       undefined1     -0x28\n; local_30       undefined8     -0x30\n; local_971      undefined1     -0x971\n; local_972      undefined1     -0x972\n; local_974      undefined2     -0x974\n; local_978      undefined4     -0x978\n; local_a78      undefined1     -0xa78\n; local_a88      undefined4     -0xa88\n; local_a90      undefined8     -0xa90\n; local_a98      undefined8     -0xa98\n; local_aa0      undefined8     -0xaa0\n; local_aa8      undefined8     -0xaa8\n; local_ab0      undefined8     -0xab0\n; local_ab8      undefined8     -0xab8\n; local_ac0      undefined8     -0xac0\n; local_ac4      undefined4     -0xac4\n; local_ac8      undefined4     -0xac8\n; local_acc      undefined4     -0xacc\n; local_ad0      undefined4     -0xad0\n; local_ae0      undefined8     -0xae0\n; local_ae8      undefined8     -0xae8\n; local_af0      undefined8     -0xaf0\n; local_b10      undefined8     -0xb10\n                                  finalMessage:\n.text:00101c7f   f30f1efa             ENDBR64\n.text:00101c83   55                   PUSH        RBP\n.text:00101c84   4889e5               MOV         RBP,RSP\n.text:00101c87   4157                 PUSH        R15\n.text:00101c89   4156                 PUSH        R14\n.text:00101c8b   4154                 PUSH        R12\n.text:00101c8d   53                   PUSH        RBX\n.text:00101c8e   4881ecc00a0000       SUB         RSP,0xac0\n.text:00101c95   64488b042528000000     MOV         RAX,qword ptr FS:[0x28]\n.text:00101c9e   488945d8             MOV         qword ptr [RBP + local_30+0x8],RAX\n.text:00101ca2   31c0                 XOR         EAX,EAX\n.text:00101ca4   4889e0               MOV         RAX,RSP\n.text:00101ca7   4889c3               MOV         RBX,RAX\n.text:00101caa   488d8590f6ffff       LEA         RAX\u003d\u003elocal_978,[RBP + -0x970]\n.text:00101cb1   488d1540150000       LEA         RDX,[DAT_001031f8]                           ; \u003d 692E2F87h\n.text:00101cb8   b927010000           MOV         ECX,0x127\n.text:00101cbd   4889c7               MOV         RDI,RAX\n.text:00101cc0   4889d6               MOV         RSI,RDX\n.text:00101cc3   f348a5               MOVSQ.REP   RDI,RSI\u003d\u003eDAT_001031f8                        ; \u003d 692E2F87h\n.text:00101cc6   4889f2               MOV         RDX,RSI\n.text:00101cc9   4889f8               MOV         RAX,RDI\n.text:00101ccc   8b0a                 MOV         ECX,dword ptr [RDX]\u003d\u003eDAT_001031f8            ; \u003d 692E2F87h\n.text:00101cce   8908                 MOV         dword ptr [RAX]\u003d\u003elocal_978,ECX\n.text:00101cd0   488d4004             LEA         RAX\u003d\u003elocal_974,[RAX + 0x4]\n.text:00101cd4   488d5204             LEA         RDX,[RDX + 0x4]\u003d\u003eDAT_001031fc                ; \u003d F94Fh\n.text:00101cd8   0fb70a               MOVZX       ECX,word ptr [RDX]\u003d\u003eDAT_001031fc             ; \u003d F94Fh\n.text:00101cdb   668908               MOV         word ptr [RAX]\u003d\u003elocal_974,CX\n.text:00101cde   488d4002             LEA         RAX\u003d\u003elocal_972,[RAX + 0x2]\n.text:00101ce2   488d5202             LEA         RDX,[RDX + 0x2]\u003d\u003eDAT_001031fe                ; \u003d 8Ch\n.text:00101ce6   0fb60a               MOVZX       ECX,byte ptr [RDX]\u003d\u003eDAT_001031fe             ; \u003d 8Ch\n.text:00101ce9   8808                 MOV         byte ptr [RAX]\u003d\u003elocal_972,CL\n.text:00101ceb   488d4001             LEA         RAX\u003d\u003elocal_971,[RAX + 0x1]\n.text:00101cef   488d5201             LEA         RDX,[RDX + 0x1]\u003d\u003eDAT_001031ff                ; \u003d 22h    \"\n.text:00101cf3   48b85002405346124172     MOV         RAX,0x7241124653400250\n.text:00101cfd   48ba6b41124401404b12     MOV         RDX,0x124b40014412416b\n.text:00101d07   48898570f5ffff       MOV         qword ptr [RBP + local_a98+0x8],RAX\n.text:00101d0e   48899578f5ffff       MOV         qword ptr [RBP + local_a90+0x8],RDX\n.text:00101d15   c78580f5ffff5c035101     MOV         dword ptr [RBP + local_a88+0x8],0x151035c\n.text:00101d1f   c78538f5ffff3f090000     MOV         dword ptr [RBP + local_ad0+0x8],0x93f\n.text:00101d29   c78544f5ffff14000000     MOV         dword ptr [RBP + local_ac4+0x8],0x14\n.text:00101d33   8b8544f5ffff         MOV         EAX,dword ptr [RBP + local_ac4+0x8]\n.text:00101d39   4863d0               MOVSXD      RDX,EAX\n.text:00101d3c   4883ea01             SUB         RDX,0x1\n.text:00101d40   48899548f5ffff       MOV         qword ptr [RBP + local_ac0+0x8],RDX\n.text:00101d47   4863d0               MOVSXD      RDX,EAX\n.text:00101d4a   4989d2               MOV         R10,RDX\n.text:00101d4d   41bb00000000         MOV         R11D,0x0\n.text:00101d53   4863d0               MOVSXD      RDX,EAX\n.text:00101d56   4989d0               MOV         R8,RDX\n.text:00101d59   41b900000000         MOV         R9D,0x0\n.text:00101d5f   4898                 CDQE\n.text:00101d61   ba10000000           MOV         EDX,0x10\n.text:00101d66   4883ea01             SUB         RDX,0x1\n.text:00101d6a   4801d0               ADD         RAX,RDX\n.text:00101d6d   bf10000000           MOV         EDI,0x10\n.text:00101d72   ba00000000           MOV         EDX,0x0\n.text:00101d77   48f7f7               DIV         RDI\n.text:00101d7a   486bc010             IMUL        RAX,RAX,0x10\n.text:00101d7e   4889c2               MOV         RDX,RAX\n.text:00101d81   4881e200f0ffff       AND         RDX,-0x1000\n.text:00101d88   4889e7               MOV         RDI,RSP\n.text:00101d8b   4829d7               SUB         RDI,RDX\n.text:00101d8e   4889fa               MOV         RDX,RDI\n                                  LAB_00101d91:\n.text:00101d91   4839d4               CMP         RSP,RDX\n.text:00101d94   7412                 JZ          LAB_00101da8\n.text:00101d96   4881ec00100000       SUB         RSP,0x1000\n.text:00101d9d   48838c24f80f000000     OR          qword ptr [RSP + local_af0+0x1ae8],0x0\n.text:00101da6   ebe9                 JMP         LAB_00101d91\n                                  LAB_00101da8:\n.text:00101da8   4889c2               MOV         RDX,RAX\n.text:00101dab   81e2ff0f0000         AND         EDX,0xfff\n.text:00101db1   4829d4               SUB         RSP,RDX\n.text:00101db4   4889c2               MOV         RDX,RAX\n.text:00101db7   81e2ff0f0000         AND         EDX,0xfff\n.text:00101dbd   4885d2               TEST        RDX,RDX\n.text:00101dc0   7410                 JZ          LAB_00101dd2\n.text:00101dc2   25ff0f0000           AND         EAX,0xfff\n.text:00101dc7   4883e808             SUB         RAX,0x8\n.text:00101dcb   4801e0               ADD         RAX,RSP\n.text:00101dce   48830800             OR          qword ptr [RAX]\u003d\u003elocal_af0,0x0\n                                  LAB_00101dd2:\n.text:00101dd2   4889e0               MOV         RAX,RSP\n.text:00101dd5   4883c000             ADD         RAX,0x0\n.text:00101dd9   48898550f5ffff       MOV         qword ptr [RBP + local_ab8+0x8],RAX\n.text:00101de0   c78540f5ffff00000000     MOV         dword ptr [RBP + local_ac8+0x8],0x0\n.text:00101dea   eb2e                 JMP         LAB_00101e1a\n                                  LAB_00101dec:\n.text:00101dec   8b8540f5ffff         MOV         EAX,dword ptr [RBP + local_ac8+0x8]\n.text:00101df2   4898                 CDQE\n.text:00101df4   0fb6840570f5ffff     MOVZX       EAX,byte ptr [RBP + RAX*0x1 + -0xa90]\n.text:00101dfc   83f032               XOR         EAX,0x32\n.text:00101dff   89c1                 MOV         ECX,EAX\n.text:00101e01   488b9550f5ffff       MOV         RDX,qword ptr [RBP + local_ab8+0x8]\n.text:00101e08   8b8540f5ffff         MOV         EAX,dword ptr [RBP + local_ac8+0x8]\n.text:00101e0e   4898                 CDQE\n.text:00101e10   880c02               MOV         byte ptr [RDX + RAX*0x1],CL\n.text:00101e13   838540f5ffff01       ADD         dword ptr [RBP + local_ac8+0x8],0x1\n                                  LAB_00101e1a:\n.text:00101e1a   8b8540f5ffff         MOV         EAX,dword ptr [RBP + local_ac8+0x8]\n.text:00101e20   3b8544f5ffff         CMP         EAX,dword ptr [RBP + local_ac4+0x8]\n.text:00101e26   7cc4                 JL          LAB_00101dec\n.text:00101e28   488d9590f5ffff       LEA         RDX\u003d\u003elocal_a78,[RBP + -0xa70]\n.text:00101e2f   488b8550f5ffff       MOV         RAX,qword ptr [RBP + local_ab8+0x8]\n.text:00101e36   4889d6               MOV         RSI,RDX\n.text:00101e39   4889c7               MOV         RDI,RAX\n.text:00101e3c   e880f4ffff           CALL        KSA                                          ; undefined KSA()\n.text:00101e41   8b8538f5ffff         MOV         EAX,dword ptr [RBP + local_ad0+0x8]\n.text:00101e47   4889e2               MOV         RDX,RSP\n.text:00101e4a   4989d4               MOV         R12,RDX\n.text:00101e4d   4863d0               MOVSXD      RDX,EAX\n.text:00101e50   4883ea01             SUB         RDX,0x1\n.text:00101e54   48899558f5ffff       MOV         qword ptr [RBP + local_ab0+0x8],RDX\n.text:00101e5b   4863d0               MOVSXD      RDX,EAX\n.text:00101e5e   48899520f5ffff       MOV         qword ptr [RBP + local_ae8+0x8],RDX\n.text:00101e65   48c78528f5ffff00000000     MOV         qword ptr [RBP + local_ae0+0x8],0x0\n.text:00101e70   4863d0               MOVSXD      RDX,EAX\n.text:00101e73   4989d6               MOV         R14,RDX\n.text:00101e76   41bf00000000         MOV         R15D,0x0\n.text:00101e7c   4898                 CDQE\n.text:00101e7e   ba10000000           MOV         EDX,0x10\n.text:00101e83   4883ea01             SUB         RDX,0x1\n.text:00101e87   4801d0               ADD         RAX,RDX\n.text:00101e8a   be10000000           MOV         ESI,0x10\n.text:00101e8f   ba00000000           MOV         EDX,0x0\n.text:00101e94   48f7f6               DIV         RSI\n.text:00101e97   486bc010             IMUL        RAX,RAX,0x10\n.text:00101e9b   4889c2               MOV         RDX,RAX\n.text:00101e9e   4881e200f0ffff       AND         RDX,-0x1000\n.text:00101ea5   4889e6               MOV         RSI,RSP\n.text:00101ea8   4829d6               SUB         RSI,RDX\n.text:00101eab   4889f2               MOV         RDX,RSI\n                                  LAB_00101eae:\n.text:00101eae   4839d4               CMP         RSP,RDX\n.text:00101eb1   7412                 JZ          LAB_00101ec5\n.text:00101eb3   4881ec00100000       SUB         RSP,0x1000\n.text:00101eba   48838c24f80f000000     OR          qword ptr [RSP + local_b10+0x1b08],0x0\n.text:00101ec3   ebe9                 JMP         LAB_00101eae\n                                  LAB_00101ec5:\n.text:00101ec5   4889c2               MOV         RDX,RAX\n.text:00101ec8   81e2ff0f0000         AND         EDX,0xfff\n.text:00101ece   4829d4               SUB         RSP,RDX\n.text:00101ed1   4889c2               MOV         RDX,RAX\n.text:00101ed4   81e2ff0f0000         AND         EDX,0xfff\n.text:00101eda   4885d2               TEST        RDX,RDX\n.text:00101edd   7410                 JZ          LAB_00101eef\n.text:00101edf   25ff0f0000           AND         EAX,0xfff\n.text:00101ee4   4883e808             SUB         RAX,0x8\n.text:00101ee8   4801e0               ADD         RAX,RSP\n.text:00101eeb   48830800             OR          qword ptr [RAX]\u003d\u003elocal_b10,0x0\n                                  LAB_00101eef:\n.text:00101eef   4889e0               MOV         RAX,RSP\n.text:00101ef2   4883c000             ADD         RAX,0x0\n.text:00101ef6   48898560f5ffff       MOV         qword ptr [RBP + local_aa8+0x8],RAX\n.text:00101efd   c7853cf5ffff00000000     MOV         dword ptr [RBP + local_acc+0x8],0x0\n.text:00101f07   eb2b                 JMP         LAB_00101f34\n                                  LAB_00101f09:\n.text:00101f09   8b853cf5ffff         MOV         EAX,dword ptr [RBP + local_acc+0x8]\n.text:00101f0f   4898                 CDQE\n.text:00101f11   0fb6840590f6ffff     MOVZX       EAX,byte ptr [RBP + RAX*0x1 + -0x970]\n.text:00101f19   89c1                 MOV         ECX,EAX\n.text:00101f1b   488b9560f5ffff       MOV         RDX,qword ptr [RBP + local_aa8+0x8]\n.text:00101f22   8b853cf5ffff         MOV         EAX,dword ptr [RBP + local_acc+0x8]\n.text:00101f28   4898                 CDQE\n.text:00101f2a   880c02               MOV         byte ptr [RDX + RAX*0x1],CL\n.text:00101f2d   83853cf5ffff01       ADD         dword ptr [RBP + local_acc+0x8],0x1\n                                  LAB_00101f34:\n.text:00101f34   8b853cf5ffff         MOV         EAX,dword ptr [RBP + local_acc+0x8]\n.text:00101f3a   3b8538f5ffff         CMP         EAX,dword ptr [RBP + local_ad0+0x8]\n.text:00101f40   7cc7                 JL          LAB_00101f09\n.text:00101f42   488b8560f5ffff       MOV         RAX,qword ptr [RBP + local_aa8+0x8]\n.text:00101f49   48898568f5ffff       MOV         qword ptr [RBP + local_aa0+0x8],RAX\n.text:00101f50   8b8d38f5ffff         MOV         ECX,dword ptr [RBP + local_ad0+0x8]\n.text:00101f56   488d9590f6ffff       LEA         RDX\u003d\u003elocal_978,[RBP + -0x970]\n.text:00101f5d   488bb568f5ffff       MOV         RSI,qword ptr [RBP + local_aa0+0x8]\n.text:00101f64   488d8590f5ffff       LEA         RAX\u003d\u003elocal_a78,[RBP + -0xa70]\n.text:00101f6b   4889c7               MOV         RDI,RAX\n.text:00101f6e   e84cf5ffff           CALL        PRGA2                                        ; undefined PRGA2()\n.text:00101f73   488b8568f5ffff       MOV         RAX,qword ptr [RBP + local_aa0+0x8]\n.text:00101f7a   4889c6               MOV         RSI,RAX\n.text:00101f7d   488d3d68120000       LEA         RDI,[s__%s_001031ec]                         ; \u003d \"\\n\\n%s\\n\\n\"\n.text:00101f84   b800000000           MOV         EAX,0x0\n.text:00101f89   e8a2f1ffff           CALL        \u003cEXTERNAL\u003e::printf                           ; int printf(char * __format, ...)\n.text:00101f8e   4c89e4               MOV         RSP,R12\n.text:00101f91   4889dc               MOV         RSP,RBX\n.text:00101f94   90                   NOP\n.text:00101f95   488b45d8             MOV         RAX,qword ptr [RBP + local_30+0x8]\n.text:00101f99   644833042528000000     XOR         RAX,qword ptr FS:[0x28]\n.text:00101fa2   7405                 JZ          LAB_00101fa9\n.text:00101fa4   e877f1ffff           CALL        \u003cEXTERNAL\u003e::__stack_chk_fail                 ; undefined __stack_chk_fail()\n                                  LAB_00101fa9:\n.text:00101fa9   488d65e0             LEA         RSP\u003d\u003elocal_28,[RBP + -0x20]\n.text:00101fad   5b                   POP         RBX\n.text:00101fae   415c                 POP         R12\n.text:00101fb0   415e                 POP         R14\n.text:00101fb2   415f                 POP         R15\n.text:00101fb4   5d                   POP         RBP\n.text:00101fb5   c3                   RET\n",
  "show": "; undefined show()\n; Parameters:\n; Stack variables:\n; local_c        undefined4     -0xc\n; local_20       undefined8     -0x20\n                                  show:\n.text:00101ab8   f30f1efa             ENDBR64\n.text:00101abc   55                   PUSH        RBP\n.text:00101abd   4889e5               MOV         RBP,RSP\n.text:00101ac0   4883ec20             SUB         RSP,0x20\n.text:00101ac4   48897de8             MOV         qword ptr [RBP + local_20+0x8],RDI\n.text:00101ac8   488d3d41160000       LEA         RDI,[s_Enter_the_item_you_want_to_show:_00103110]     ; \u003d \"Enter the item you want to show:\"\n.text:00101acf   e82cf6ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:00101ad4   b800000000           MOV         EAX,0x0\n.text:00101ad9   e8c8fcffff           CALL        read_int                                     ; undefined read_int()\n.text:00101ade   8945fc               MOV         dword ptr [RBP + local_c+0x8],EAX\n.text:00101ae1   837dfc00             CMP         dword ptr [RBP + local_c+0x8],0x0\n.text:00101ae5   7834                 JS          LAB_00101b1b\n.text:00101ae7   837dfc09             CMP         dword ptr [RBP + local_c+0x8],0x9\n.text:00101aeb   7f2e                 JG          LAB_00101b1b\n.text:00101aed   488d3d3d160000       LEA         RDI,[s_Here_is_your_content:_00103131]       ; \u003d \"Here is your content: \"\n.text:00101af4   e807f6ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:00101af9   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:00101afd   8b55fc               MOV         EDX,dword ptr [RBP + local_c+0x8]\n.text:00101b00   4863d2               MOVSXD      RDX,EDX\n.text:00101b03   488b04d0             MOV         RAX,qword ptr [RAX + RDX*0x8]\n.text:00101b07   4889c6               MOV         RSI,RAX\n.text:00101b0a   488d3d37160000       LEA         RDI,[DAT_00103148]                           ; \u003d 25h    %\n.text:00101b11   b800000000           MOV         EAX,0x0\n.text:00101b16   e815f6ffff           CALL        \u003cEXTERNAL\u003e::printf                           ; int printf(char * __format, ...)\n                                  LAB_00101b1b:\n.text:00101b1b   90                   NOP\n.text:00101b1c   c9                   LEAVE\n.text:00101b1d   c3                   RET\n",
  "read_int": "; undefined read_int()\n; Parameters:\n; Stack variables:\n; local_10       undefined8     -0x10\n; local_1a       undefined1     -0x1a\n; local_20       undefined4     -0x20\n                                  read_int:\n.text:001017a6   f30f1efa             ENDBR64\n.text:001017aa   55                   PUSH        RBP\n.text:001017ab   4889e5               MOV         RBP,RSP\n.text:001017ae   4883ec20             SUB         RSP,0x20\n.text:001017b2   64488b042528000000     MOV         RAX,qword ptr FS:[0x28]\n.text:001017bb   488945f8             MOV         qword ptr [RBP + local_10+0x8],RAX\n.text:001017bf   31c0                 XOR         EAX,EAX\n.text:001017c1   488b1568480000       MOV         RDX,qword ptr [stdin]\n.text:001017c8   488d45ee             LEA         RAX\u003d\u003elocal_1a,[RBP + -0x12]\n.text:001017cc   be0a000000           MOV         ESI,0xa\n.text:001017d1   4889c7               MOV         RDI,RAX\n.text:001017d4   e877f9ffff           CALL        \u003cEXTERNAL\u003e::fgets                            ; char * fgets(char * __s, int __n, FILE * __stream)\n.text:001017d9   c745e800000000       MOV         dword ptr [RBP + local_20+0x8],0x0\n.text:001017e0   488d55e8             LEA         RDX\u003d\u003elocal_20,[RBP + -0x18]\n.text:001017e4   488d45ee             LEA         RAX\u003d\u003elocal_1a,[RBP + -0x12]\n.text:001017e8   488d3519180000       LEA         RSI,[DAT_00103008]                           ; \u003d 25h    %\n.text:001017ef   4889c7               MOV         RDI,RAX\n.text:001017f2   b800000000           MOV         EAX,0x0\n.text:001017f7   e884f9ffff           CALL        \u003cEXTERNAL\u003e::__isoc99_sscanf                  ; undefined __isoc99_sscanf()\n.text:001017fc   8b45e8               MOV         EAX,dword ptr [RBP + local_20+0x8]\n.text:001017ff   488b4df8             MOV         RCX,qword ptr [RBP + local_10+0x8]\n.text:00101803   6448330c2528000000     XOR         RCX,qword ptr FS:[0x28]\n.text:0010180c   7405                 JZ          LAB_00101813\n.text:0010180e   e80df9ffff           CALL        \u003cEXTERNAL\u003e::__stack_chk_fail                 ; undefined __stack_chk_fail()\n                                  LAB_00101813:\n.text:00101813   c9                   LEAVE\n.text:00101814   c3                   RET\n",
  "__stack_chk_fail": "; undefined __stack_chk_fail()\n; Parameters:\n; Stack variables:\n                                  __stack_chk_fail:\n.plt.sec:00101120 f30f1efa             ENDBR64\n.plt.sec:00101124 f2ff256d4e0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__stack_chk_fail]     ; undefined __stack_chk_fail()\n; undefined __stack_chk_fail()\n; Parameters:\n; Stack variables:\n                                  ; __stack_chk_fail@@GLIBC_2.4\n                                  __stack_chk_fail:\nEXTERNAL:00107020                      ??          ??\n",
  "main": "; undefined main()\n; Parameters:\n; Stack variables:\n; local_c        undefined4     -0xc\n                                  main:\n.text:00101fb6   f30f1efa             ENDBR64\n.text:00101fba   55                   PUSH        RBP\n.text:00101fbb   4889e5               MOV         RBP,RSP\n.text:00101fbe   4883ec10             SUB         RSP,0x10\n.text:00101fc2   488b0557400000       MOV         RAX,qword ptr [stdout]\n.text:00101fc9   b900000000           MOV         ECX,0x0\n.text:00101fce   ba02000000           MOV         EDX,0x2\n.text:00101fd3   be00000000           MOV         ESI,0x0\n.text:00101fd8   4889c7               MOV         RDI,RAX\n.text:00101fdb   e8b0f1ffff           CALL        \u003cEXTERNAL\u003e::setvbuf                          ; int setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n.text:00101fe0   488b0549400000       MOV         RAX,qword ptr [stdin]\n.text:00101fe7   b900000000           MOV         ECX,0x0\n.text:00101fec   ba02000000           MOV         EDX,0x2\n.text:00101ff1   be00000000           MOV         ESI,0x0\n.text:00101ff6   4889c7               MOV         RDI,RAX\n.text:00101ff9   e892f1ffff           CALL        \u003cEXTERNAL\u003e::setvbuf                          ; int setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n.text:00101ffe   488b051b400000       MOV         RAX,qword ptr [stdout]\n.text:00102005   4889c7               MOV         RDI,RAX\n.text:00102008   e863f1ffff           CALL        \u003cEXTERNAL\u003e::fflush                           ; int fflush(FILE * __stream)\n.text:0010200d   b800000000           MOV         EAX,0x0\n.text:00102012   e868fcffff           CALL        finalMessage                                 ; undefined finalMessage()\n.text:00102017   c745fc00000000       MOV         dword ptr [RBP + local_c+0x8],0x0\n.text:0010201e   eb0d                 JMP         LAB_0010202d\n                                  LAB_00102020:\n.text:00102020   b800000000           MOV         EAX,0x0\n.text:00102025   e8f4faffff           CALL        menu                                         ; undefined menu()\n.text:0010202a   8945fc               MOV         dword ptr [RBP + local_c+0x8],EAX\n                                  LAB_0010202d:\n.text:0010202d   837dfc00             CMP         dword ptr [RBP + local_c+0x8],0x0\n.text:00102031   74ed                 JZ          LAB_00102020\n.text:00102033   488d3dfe1a0000       LEA         RDI,[s__Thank_you_for_using_Super_Secur_00103b38]     ; \u003d \"\\nThank you for using Super Secure Heap (SSH). Exiting.\"\n.text:0010203a   e8c1f0ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:0010203f   b800000000           MOV         EAX,0x0\n.text:00102044   c9                   LEAVE\n.text:00102045   c3                   RET\n",
  "FUN_001010e0": "; undefined FUN_001010e0()\n; Parameters:\n; Stack variables:\n                                  FUN_001010e0:\n.plt.got:001010e0 f30f1efa             ENDBR64\n.plt.got:001010e4 f2ff250d4f0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__cxa_finalize]     ; undefined __cxa_finalize()\n",
  "delete": "; undefined delete()\n; Parameters:\n; Stack variables:\n; local_c        undefined4     -0xc\n; local_20       undefined8     -0x20\n; local_24       undefined4     -0x24\n                                  delete:\n.text:00101a3a   f30f1efa             ENDBR64\n.text:00101a3e   55                   PUSH        RBP\n.text:00101a3f   4889e5               MOV         RBP,RSP\n.text:00101a42   4883ec20             SUB         RSP,0x20\n.text:00101a46   48897de8             MOV         qword ptr [RBP + local_20+0x8],RDI\n.text:00101a4a   8975e4               MOV         dword ptr [RBP + local_24+0x8],ESI\n.text:00101a4d   488d3d94160000       LEA         RDI,[s_Enter_the_item_you_want_to_remov_001030e8]     ; \u003d \"Enter the item you want to remove:\"\n.text:00101a54   e8a7f6ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:00101a59   b800000000           MOV         EAX,0x0\n.text:00101a5e   e843fdffff           CALL        read_int                                     ; undefined read_int()\n.text:00101a63   8945fc               MOV         dword ptr [RBP + local_c+0x8],EAX\n.text:00101a66   837dfc00             CMP         dword ptr [RBP + local_c+0x8],0x0\n.text:00101a6a   7849                 JS          LAB_00101ab5\n.text:00101a6c   837dfc09             CMP         dword ptr [RBP + local_c+0x8],0x9\n.text:00101a70   7f43                 JG          LAB_00101ab5\n.text:00101a72   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:00101a76   8b55fc               MOV         EDX,dword ptr [RBP + local_c+0x8]\n.text:00101a79   4863d2               MOVSXD      RDX,EDX\n.text:00101a7c   488b04d0             MOV         RAX,qword ptr [RAX + RDX*0x8]\n.text:00101a80   4889c7               MOV         RDI,RAX\n.text:00101a83   e868f6ffff           CALL        \u003cEXTERNAL\u003e::free                             ; void free(void * __ptr)\n.text:00101a88   837de401             CMP         dword ptr [RBP + local_24+0x8],0x1\n.text:00101a8c   7527                 JNZ         LAB_00101ab5\n.text:00101a8e   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:00101a92   8b55fc               MOV         EDX,dword ptr [RBP + local_c+0x8]\n.text:00101a95   4863d2               MOVSXD      RDX,EDX\n.text:00101a98   4883c214             ADD         RDX,0x14\n.text:00101a9c   c7049000000000       MOV         dword ptr [RAX + RDX*0x4],0x0\n.text:00101aa3   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:00101aa7   8b55fc               MOV         EDX,dword ptr [RBP + local_c+0x8]\n.text:00101aaa   4863d2               MOVSXD      RDX,EDX\n.text:00101aad   48c704d000000000     MOV         qword ptr [RAX + RDX*0x8],0x0\n                                  LAB_00101ab5:\n.text:00101ab5   90                   NOP\n.text:00101ab6   c9                   LEAVE\n.text:00101ab7   c3                   RET\n",
  "fgets": "; char * fgets(char * __s, int __n, FILE * __stream)\n; Parameters:\n; __s            char *         RDI\n; __n            int            ESI\n; __stream       FILE *         RDX\n; Stack variables:\n                                  fgets:\n.plt.sec:00101150 f30f1efa             ENDBR64\n.plt.sec:00101154 f2ff25554e0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::fgets]              ; char * fgets(char * __s, int __n, FILE * __stream)\n; char * fgets(char * __s, int __n, FILE * __stream)\n; Parameters:\n; __s            char *         RDI\n; __n            int            ESI\n; __stream       FILE *         RDX\n; Stack variables:\n                                  ; fgets@@GLIBC_2.2.5\n                                  fgets:\nEXTERNAL:00107040                      ??          ??\n",
  "printf": "; int printf(char * __format, ...)\n; Parameters:\n; __format       char *         RDI\n; Stack variables:\n                                  printf:\n.plt.sec:00101130 f30f1efa             ENDBR64\n.plt.sec:00101134 f2ff25654e0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::printf]             ; int printf(char * __format, ...)\n; int printf(char * __format, ...)\n; Parameters:\n; __format       char *         RDI\n; Stack variables:\n                                  ; printf@@GLIBC_2.2.5\n                                  printf:\nEXTERNAL:00107028                      ??          ??\n",
  "deregister_tm_clones": "; undefined deregister_tm_clones()\n; Parameters:\n; Stack variables:\n                                  deregister_tm_clones:\n.text:001011d0   488d3d394e0000       LEA         RDI,[__TMC_END__]\n.text:001011d7   488d05324e0000       LEA         RAX,[__TMC_END__]\n.text:001011de   4839f8               CMP         RAX,RDI\n.text:001011e1   7415                 JZ          LAB_001011f8\n.text:001011e3   488b05ee4d0000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable,qword ptr [-\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable]     ; \u003d ??, \u003d 00107008\n.text:001011ea   4885c0               TEST        RAX,RAX\n.text:001011ed   7409                 JZ          LAB_001011f8\n.text:001011ef   ffe0                 JMP         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable     ; undefined _ITM_deregisterTMCloneTable()\n                                  LAB_001011f8:\n.text:001011f8   c3                   RET\n",
  "strlen": "; size_t strlen(char * __s)\n; Parameters:\n; __s            char *         RDI\n; Stack variables:\n                                  strlen:\n.plt.sec:00101110 f30f1efa             ENDBR64\n.plt.sec:00101114 f2ff25754e0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::strlen]             ; size_t strlen(char * __s)\n; size_t strlen(char * __s)\n; Parameters:\n; __s            char *         RDI\n; Stack variables:\n                                  ; strlen@@GLIBC_2.2.5\n                                  strlen:\nEXTERNAL:00107018                      ??          ??\n",
  "__libc_start_main": "; undefined __libc_start_main()\n; Parameters:\n; Stack variables:\n                                  ; __libc_start_main@@GLIBC_2.2.5\n                                  __libc_start_main:\nEXTERNAL:00107038                      ??          ??\n",
  "secure_stuff": "; undefined secure_stuff()\n; Parameters:\n; Stack variables:\n; local_30       undefined1     -0x30\n; local_40       undefined8     -0x40\n; local_148      undefined1     -0x148\n; local_150      undefined8     -0x150\n; local_158      undefined8     -0x158\n; local_15c      undefined4     -0x15c\n; local_16c      undefined4     -0x16c\n; local_170      undefined4     -0x170\n; local_174      undefined4     -0x174\n; local_180      undefined8     -0x180\n                                  secure_stuff:\n.text:001015d6   f30f1efa             ENDBR64\n.text:001015da   55                   PUSH        RBP\n.text:001015db   4889e5               MOV         RBP,RSP\n.text:001015de   4157                 PUSH        R15\n.text:001015e0   4156                 PUSH        R14\n.text:001015e2   4155                 PUSH        R13\n.text:001015e4   4154                 PUSH        R12\n.text:001015e6   53                   PUSH        RBX\n.text:001015e7   4881ec48010000       SUB         RSP,0x148\n.text:001015ee   89bd9cfeffff         MOV         dword ptr [RBP + local_16c+0x8],EDI\n.text:001015f4   89b598feffff         MOV         dword ptr [RBP + local_170+0x8],ESI\n.text:001015fa   899594feffff         MOV         dword ptr [RBP + local_174+0x8],EDX\n.text:00101600   64488b042528000000     MOV         RAX,qword ptr FS:[0x28]\n.text:00101609   488945c8             MOV         qword ptr [RBP + local_40+0x8],RAX\n.text:0010160d   31c0                 XOR         EAX,EAX\n.text:0010160f   4889e0               MOV         RAX,RSP\n.text:00101612   4889c3               MOV         RBX,RAX\n.text:00101615   8b8598feffff         MOV         EAX,dword ptr [RBP + local_170+0x8]\n.text:0010161b   4898                 CDQE\n.text:0010161d   488d14c500000000     LEA         RDX,[RAX*0x8]\n.text:00101625   488d05944a0000       LEA         RAX,[keys]\n.text:0010162c   488b0402             MOV         RAX\u003d\u003ekeys,qword ptr [RDX + RAX*0x1]\n.text:00101630   488d95c0feffff       LEA         RDX\u003d\u003elocal_148,[RBP + -0x140]\n.text:00101637   4889d6               MOV         RSI,RDX\n.text:0010163a   4889c7               MOV         RDI,RAX\n.text:0010163d   e87ffcffff           CALL        KSA                                          ; undefined KSA()\n.text:00101642   8b8594feffff         MOV         EAX,dword ptr [RBP + local_174+0x8]\n.text:00101648   4863d0               MOVSXD      RDX,EAX\n.text:0010164b   4883ea01             SUB         RDX,0x1\n.text:0010164f   488995b0feffff       MOV         qword ptr [RBP + local_158+0x8],RDX\n.text:00101656   4863d0               MOVSXD      RDX,EAX\n.text:00101659   4989d6               MOV         R14,RDX\n.text:0010165c   41bf00000000         MOV         R15D,0x0\n.text:00101662   4863d0               MOVSXD      RDX,EAX\n.text:00101665   4989d4               MOV         R12,RDX\n.text:00101668   41bd00000000         MOV         R13D,0x0\n.text:0010166e   4898                 CDQE\n.text:00101670   ba10000000           MOV         EDX,0x10\n.text:00101675   4883ea01             SUB         RDX,0x1\n.text:00101679   4801d0               ADD         RAX,RDX\n.text:0010167c   bf10000000           MOV         EDI,0x10\n.text:00101681   ba00000000           MOV         EDX,0x0\n.text:00101686   48f7f7               DIV         RDI\n.text:00101689   486bc010             IMUL        RAX,RAX,0x10\n.text:0010168d   4889c2               MOV         RDX,RAX\n.text:00101690   4881e200f0ffff       AND         RDX,-0x1000\n.text:00101697   4889e6               MOV         RSI,RSP\n.text:0010169a   4829d6               SUB         RSI,RDX\n.text:0010169d   4889f2               MOV         RDX,RSI\n                                  LAB_001016a0:\n.text:001016a0   4839d4               CMP         RSP,RDX\n.text:001016a3   7412                 JZ          LAB_001016b7\n.text:001016a5   4881ec00100000       SUB         RSP,0x1000\n.text:001016ac   48838c24f80f000000     OR          qword ptr [RSP + local_180+0x1178],0x0\n.text:001016b5   ebe9                 JMP         LAB_001016a0\n                                  LAB_001016b7:\n.text:001016b7   4889c2               MOV         RDX,RAX\n.text:001016ba   81e2ff0f0000         AND         EDX,0xfff\n.text:001016c0   4829d4               SUB         RSP,RDX\n.text:001016c3   4889c2               MOV         RDX,RAX\n.text:001016c6   81e2ff0f0000         AND         EDX,0xfff\n.text:001016cc   4885d2               TEST        RDX,RDX\n.text:001016cf   7410                 JZ          LAB_001016e1\n.text:001016d1   25ff0f0000           AND         EAX,0xfff\n.text:001016d6   4883e808             SUB         RAX,0x8\n.text:001016da   4801e0               ADD         RAX,RSP\n.text:001016dd   48830800             OR          qword ptr [RAX],0x0\n                                  LAB_001016e1:\n.text:001016e1   4889e0               MOV         RAX,RSP\n.text:001016e4   4883c000             ADD         RAX,0x0\n.text:001016e8   488985b8feffff       MOV         qword ptr [RBP + local_150+0x8],RAX\n.text:001016ef   c785acfeffff00000000     MOV         dword ptr [RBP + local_15c+0x8],0x0\n.text:001016f9   eb42                 JMP         LAB_0010173d\n                                  LAB_001016fb:\n.text:001016fb   8b859cfeffff         MOV         EAX,dword ptr [RBP + local_16c+0x8]\n.text:00101701   4898                 CDQE\n.text:00101703   488d14c500000000     LEA         RDX,[RAX*0x8]\n.text:0010170b   488d052e490000       LEA         RAX,[content]\n.text:00101712   488b1402             MOV         RDX,qword ptr [RDX + RAX*0x1]\u003d\u003econtent\n.text:00101716   8b85acfeffff         MOV         EAX,dword ptr [RBP + local_15c+0x8]\n.text:0010171c   4898                 CDQE\n.text:0010171e   4801d0               ADD         RAX,RDX\n.text:00101721   0fb608               MOVZX       ECX,byte ptr [RAX]\n.text:00101724   488b95b8feffff       MOV         RDX,qword ptr [RBP + local_150+0x8]\n.text:0010172b   8b85acfeffff         MOV         EAX,dword ptr [RBP + local_15c+0x8]\n.text:00101731   4898                 CDQE\n.text:00101733   880c02               MOV         byte ptr [RDX + RAX*0x1],CL\n.text:00101736   8385acfeffff01       ADD         dword ptr [RBP + local_15c+0x8],0x1\n                                  LAB_0010173d:\n.text:0010173d   8b85acfeffff         MOV         EAX,dword ptr [RBP + local_15c+0x8]\n.text:00101743   3b8594feffff         CMP         EAX,dword ptr [RBP + local_174+0x8]\n.text:00101749   7cb0                 JL          LAB_001016fb\n.text:0010174b   8b859cfeffff         MOV         EAX,dword ptr [RBP + local_16c+0x8]\n.text:00101751   4898                 CDQE\n.text:00101753   488d14c500000000     LEA         RDX,[RAX*0x8]\n.text:0010175b   488d05de480000       LEA         RAX,[content]\n.text:00101762   488b1402             MOV         RDX,qword ptr [RDX + RAX*0x1]\u003d\u003econtent\n.text:00101766   488b8db8feffff       MOV         RCX,qword ptr [RBP + local_150+0x8]\n.text:0010176d   488d85c0feffff       LEA         RAX\u003d\u003elocal_148,[RBP + -0x140]\n.text:00101774   4889ce               MOV         RSI,RCX\n.text:00101777   4889c7               MOV         RDI,RAX\n.text:0010177a   e81ffcffff           CALL        PRGA                                         ; undefined PRGA()\n.text:0010177f   4889dc               MOV         RSP,RBX\n.text:00101782   90                   NOP\n.text:00101783   488b45c8             MOV         RAX,qword ptr [RBP + local_40+0x8]\n.text:00101787   644833042528000000     XOR         RAX,qword ptr FS:[0x28]\n.text:00101790   7405                 JZ          LAB_00101797\n.text:00101792   e889f9ffff           CALL        \u003cEXTERNAL\u003e::__stack_chk_fail                 ; undefined __stack_chk_fail()\n                                  LAB_00101797:\n.text:00101797   488d65d8             LEA         RSP\u003d\u003elocal_30,[RBP + -0x28]\n.text:0010179b   5b                   POP         RBX\n.text:0010179c   415c                 POP         R12\n.text:0010179e   415d                 POP         R13\n.text:001017a0   415e                 POP         R14\n.text:001017a2   415f                 POP         R15\n.text:001017a4   5d                   POP         RBP\n.text:001017a5   c3                   RET\n",
  "FUN_00101020": "; undefined FUN_00101020()\n; Parameters:\n; Stack variables:\n                                  FUN_00101020:\n.plt:00101020    ff354a4f0000         PUSH        qword ptr [PTR_00105f70]                     ; \u003d 00000000\n.plt:00101026    f2ff254b4f0000       JMP         qword ptr [PTR_00105f78]\n.plt:00101030    f30f1efa             ENDBR64\n.plt:00101034    6800000000           PUSH        0x0\n.plt:00101039    f2e9e1ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:0010103f    90                   NOP\n.plt:00101040    f30f1efa             ENDBR64\n.plt:00101044    6801000000           PUSH        0x1\n.plt:00101049    f2e9d1ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:0010104f    90                   NOP\n.plt:00101050    f30f1efa             ENDBR64\n.plt:00101054    6802000000           PUSH        0x2\n.plt:00101059    f2e9c1ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:0010105f    90                   NOP\n.plt:00101060    f30f1efa             ENDBR64\n.plt:00101064    6803000000           PUSH        0x3\n.plt:00101069    f2e9b1ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:0010106f    90                   NOP\n.plt:00101070    f30f1efa             ENDBR64\n.plt:00101074    6804000000           PUSH        0x4\n.plt:00101079    f2e9a1ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:0010107f    90                   NOP\n.plt:00101080    f30f1efa             ENDBR64\n.plt:00101084    6805000000           PUSH        0x5\n.plt:00101089    f2e991ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:0010108f    90                   NOP\n.plt:00101090    f30f1efa             ENDBR64\n.plt:00101094    6806000000           PUSH        0x6\n.plt:00101099    f2e981ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:0010109f    90                   NOP\n.plt:001010a0    f30f1efa             ENDBR64\n.plt:001010a4    6807000000           PUSH        0x7\n.plt:001010a9    f2e971ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:001010af    90                   NOP\n.plt:001010b0    f30f1efa             ENDBR64\n.plt:001010b4    6808000000           PUSH        0x8\n.plt:001010b9    f2e961ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:001010bf    90                   NOP\n.plt:001010c0    f30f1efa             ENDBR64\n.plt:001010c4    6809000000           PUSH        0x9\n.plt:001010c9    f2e951ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:001010cf    90                   NOP\n.plt:001010d0    f30f1efa             ENDBR64\n.plt:001010d4    680a000000           PUSH        0xa\n.plt:001010d9    f2e941ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:001010df    90                   NOP\n",
  "KSA": "; undefined KSA()\n; Parameters:\n; Stack variables:\n; local_c        undefined4     -0xc\n; local_10       undefined4     -0x10\n; local_14       undefined4     -0x14\n; local_18       undefined4     -0x18\n; local_20       undefined8     -0x20\n; local_28       undefined8     -0x28\n                                  KSA:\n.text:001012c1   f30f1efa             ENDBR64\n.text:001012c5   55                   PUSH        RBP\n.text:001012c6   4889e5               MOV         RBP,RSP\n.text:001012c9   4883ec20             SUB         RSP,0x20\n.text:001012cd   48897de8             MOV         qword ptr [RBP + local_20+0x8],RDI\n.text:001012d1   488975e0             MOV         qword ptr [RBP + local_28+0x8],RSI\n.text:001012d5   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:001012d9   4889c7               MOV         RDI,RAX\n.text:001012dc   e82ffeffff           CALL        \u003cEXTERNAL\u003e::strlen                           ; size_t strlen(char * __s)\n.text:001012e1   8945fc               MOV         dword ptr [RBP + local_c+0x8],EAX\n.text:001012e4   c745f000000000       MOV         dword ptr [RBP + local_18+0x8],0x0\n.text:001012eb   c745f400000000       MOV         dword ptr [RBP + local_14+0x8],0x0\n.text:001012f2   eb16                 JMP         LAB_0010130a\n                                  LAB_001012f4:\n.text:001012f4   8b45f4               MOV         EAX,dword ptr [RBP + local_14+0x8]\n.text:001012f7   4863d0               MOVSXD      RDX,EAX\n.text:001012fa   488b45e0             MOV         RAX,qword ptr [RBP + local_28+0x8]\n.text:001012fe   4801d0               ADD         RAX,RDX\n.text:00101301   8b55f4               MOV         EDX,dword ptr [RBP + local_14+0x8]\n.text:00101304   8810                 MOV         byte ptr [RAX],DL\n.text:00101306   8345f401             ADD         dword ptr [RBP + local_14+0x8],0x1\n                                  LAB_0010130a:\n.text:0010130a   817df4ff000000       CMP         dword ptr [RBP + local_14+0x8],0xff\n.text:00101311   7ee1                 JLE         LAB_001012f4\n.text:00101313   c745f800000000       MOV         dword ptr [RBP + local_10+0x8],0x0\n.text:0010131a   eb72                 JMP         LAB_0010138e\n                                  LAB_0010131c:\n.text:0010131c   8b45f8               MOV         EAX,dword ptr [RBP + local_10+0x8]\n.text:0010131f   4863d0               MOVSXD      RDX,EAX\n.text:00101322   488b45e0             MOV         RAX,qword ptr [RBP + local_28+0x8]\n.text:00101326   4801d0               ADD         RAX,RDX\n.text:00101329   0fb600               MOVZX       EAX,byte ptr [RAX]\n.text:0010132c   0fb6d0               MOVZX       EDX,AL\n.text:0010132f   8b45f0               MOV         EAX,dword ptr [RBP + local_18+0x8]\n.text:00101332   8d0c02               LEA         ECX,[RDX + RAX*0x1]\n.text:00101335   8b45f8               MOV         EAX,dword ptr [RBP + local_10+0x8]\n.text:00101338   99                   CDQ\n.text:00101339   f77dfc               IDIV        dword ptr [RBP + local_c+0x8]\n.text:0010133c   89d0                 MOV         EAX,EDX\n.text:0010133e   4863d0               MOVSXD      RDX,EAX\n.text:00101341   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:00101345   4801d0               ADD         RAX,RDX\n.text:00101348   0fb600               MOVZX       EAX,byte ptr [RAX]\n.text:0010134b   0fbec0               MOVSX       EAX,AL\n.text:0010134e   8d1401               LEA         EDX,[RCX + RAX*0x1]\n.text:00101351   89d0                 MOV         EAX,EDX\n.text:00101353   c1f81f               SAR         EAX,0x1f\n.text:00101356   c1e818               SHR         EAX,0x18\n.text:00101359   01c2                 ADD         EDX,EAX\n.text:0010135b   0fb6d2               MOVZX       EDX,DL\n.text:0010135e   29c2                 SUB         EDX,EAX\n.text:00101360   89d0                 MOV         EAX,EDX\n.text:00101362   8945f0               MOV         dword ptr [RBP + local_18+0x8],EAX\n.text:00101365   8b45f0               MOV         EAX,dword ptr [RBP + local_18+0x8]\n.text:00101368   4863d0               MOVSXD      RDX,EAX\n.text:0010136b   488b45e0             MOV         RAX,qword ptr [RBP + local_28+0x8]\n.text:0010136f   4801c2               ADD         RDX,RAX\n.text:00101372   8b45f8               MOV         EAX,dword ptr [RBP + local_10+0x8]\n.text:00101375   4863c8               MOVSXD      RCX,EAX\n.text:00101378   488b45e0             MOV         RAX,qword ptr [RBP + local_28+0x8]\n.text:0010137c   4801c8               ADD         RAX,RCX\n.text:0010137f   4889d6               MOV         RSI,RDX\n.text:00101382   4889c7               MOV         RDI,RAX\n.text:00101385   e8fffeffff           CALL        swap                                         ; undefined swap()\n.text:0010138a   8345f801             ADD         dword ptr [RBP + local_10+0x8],0x1\n                                  LAB_0010138e:\n.text:0010138e   817df8ff000000       CMP         dword ptr [RBP + local_10+0x8],0xff\n.text:00101395   7e85                 JLE         LAB_0010131c\n.text:00101397   b800000000           MOV         EAX,0x0\n.text:0010139c   c9                   LEAVE\n.text:0010139d   c3                   RET\n",
  "_ITM_deregisterTMCloneTable": "; undefined _ITM_deregisterTMCloneTable()\n; Parameters:\n; Stack variables:\n                                  _ITM_deregisterTMCloneTable:\nEXTERNAL:00107008                      ??          ??\n",
  "PRGA2": "; undefined PRGA2()\n; Parameters:\n; Stack variables:\n; local_10       undefined8     -0x10\n; local_14       undefined4     -0x14\n; local_18       undefined4     -0x18\n; local_1c       undefined4     -0x1c\n; local_30       undefined8     -0x30\n; local_38       undefined8     -0x38\n; local_40       undefined8     -0x40\n; local_44       undefined4     -0x44\n                                  PRGA2:\n.text:001014bf   f30f1efa             ENDBR64\n.text:001014c3   55                   PUSH        RBP\n.text:001014c4   4889e5               MOV         RBP,RSP\n.text:001014c7   4883ec40             SUB         RSP,0x40\n.text:001014cb   48897dd8             MOV         qword ptr [RBP + local_30+0x8],RDI\n.text:001014cf   488975d0             MOV         qword ptr [RBP + local_38+0x8],RSI\n.text:001014d3   488955c8             MOV         qword ptr [RBP + local_40+0x8],RDX\n.text:001014d7   894dc4               MOV         dword ptr [RBP + local_44+0x8],ECX\n.text:001014da   c745ec00000000       MOV         dword ptr [RBP + local_1c+0x8],0x0\n.text:001014e1   c745f000000000       MOV         dword ptr [RBP + local_18+0x8],0x0\n.text:001014e8   48c745f800000000     MOV         qword ptr [RBP + local_10+0x8],0x0\n.text:001014f0   e9cb000000           JMP         LAB_001015c0\n                                  LAB_001014f5:\n.text:001014f5   8b45ec               MOV         EAX,dword ptr [RBP + local_1c+0x8]\n.text:001014f8   8d5001               LEA         EDX,[RAX + 0x1]\n.text:001014fb   89d0                 MOV         EAX,EDX\n.text:001014fd   c1f81f               SAR         EAX,0x1f\n.text:00101500   c1e818               SHR         EAX,0x18\n.text:00101503   01c2                 ADD         EDX,EAX\n.text:00101505   0fb6d2               MOVZX       EDX,DL\n.text:00101508   29c2                 SUB         EDX,EAX\n.text:0010150a   89d0                 MOV         EAX,EDX\n.text:0010150c   8945ec               MOV         dword ptr [RBP + local_1c+0x8],EAX\n.text:0010150f   8b45ec               MOV         EAX,dword ptr [RBP + local_1c+0x8]\n.text:00101512   4863d0               MOVSXD      RDX,EAX\n.text:00101515   488b45d8             MOV         RAX,qword ptr [RBP + local_30+0x8]\n.text:00101519   4801d0               ADD         RAX,RDX\n.text:0010151c   0fb600               MOVZX       EAX,byte ptr [RAX]\n.text:0010151f   0fb6d0               MOVZX       EDX,AL\n.text:00101522   8b45f0               MOV         EAX,dword ptr [RBP + local_18+0x8]\n.text:00101525   01c2                 ADD         EDX,EAX\n.text:00101527   89d0                 MOV         EAX,EDX\n.text:00101529   c1f81f               SAR         EAX,0x1f\n.text:0010152c   c1e818               SHR         EAX,0x18\n.text:0010152f   01c2                 ADD         EDX,EAX\n.text:00101531   0fb6d2               MOVZX       EDX,DL\n.text:00101534   29c2                 SUB         EDX,EAX\n.text:00101536   89d0                 MOV         EAX,EDX\n.text:00101538   8945f0               MOV         dword ptr [RBP + local_18+0x8],EAX\n.text:0010153b   8b45f0               MOV         EAX,dword ptr [RBP + local_18+0x8]\n.text:0010153e   4863d0               MOVSXD      RDX,EAX\n.text:00101541   488b45d8             MOV         RAX,qword ptr [RBP + local_30+0x8]\n.text:00101545   4801c2               ADD         RDX,RAX\n.text:00101548   8b45ec               MOV         EAX,dword ptr [RBP + local_1c+0x8]\n.text:0010154b   4863c8               MOVSXD      RCX,EAX\n.text:0010154e   488b45d8             MOV         RAX,qword ptr [RBP + local_30+0x8]\n.text:00101552   4801c8               ADD         RAX,RCX\n.text:00101555   4889d6               MOV         RSI,RDX\n.text:00101558   4889c7               MOV         RDI,RAX\n.text:0010155b   e829fdffff           CALL        swap                                         ; undefined swap()\n.text:00101560   8b45ec               MOV         EAX,dword ptr [RBP + local_1c+0x8]\n.text:00101563   4863d0               MOVSXD      RDX,EAX\n.text:00101566   488b45d8             MOV         RAX,qword ptr [RBP + local_30+0x8]\n.text:0010156a   4801d0               ADD         RAX,RDX\n.text:0010156d   0fb610               MOVZX       EDX,byte ptr [RAX]\n.text:00101570   8b45f0               MOV         EAX,dword ptr [RBP + local_18+0x8]\n.text:00101573   4863c8               MOVSXD      RCX,EAX\n.text:00101576   488b45d8             MOV         RAX,qword ptr [RBP + local_30+0x8]\n.text:0010157a   4801c8               ADD         RAX,RCX\n.text:0010157d   0fb600               MOVZX       EAX,byte ptr [RAX]\n.text:00101580   01d0                 ADD         EAX,EDX\n.text:00101582   0fb6d0               MOVZX       EDX,AL\n.text:00101585   488b45d8             MOV         RAX,qword ptr [RBP + local_30+0x8]\n.text:00101589   4801d0               ADD         RAX,RDX\n.text:0010158c   0fb600               MOVZX       EAX,byte ptr [RAX]\n.text:0010158f   0fb6c0               MOVZX       EAX,AL\n.text:00101592   8945f4               MOV         dword ptr [RBP + local_14+0x8],EAX\n.text:00101595   488b55c8             MOV         RDX,qword ptr [RBP + local_40+0x8]\n.text:00101599   488b45f8             MOV         RAX,qword ptr [RBP + local_10+0x8]\n.text:0010159d   4801d0               ADD         RAX,RDX\n.text:001015a0   0fb600               MOVZX       EAX,byte ptr [RAX]\n.text:001015a3   89c6                 MOV         ESI,EAX\n.text:001015a5   8b45f4               MOV         EAX,dword ptr [RBP + local_14+0x8]\n.text:001015a8   89c1                 MOV         ECX,EAX\n.text:001015aa   488b55d0             MOV         RDX,qword ptr [RBP + local_38+0x8]\n.text:001015ae   488b45f8             MOV         RAX,qword ptr [RBP + local_10+0x8]\n.text:001015b2   4801d0               ADD         RAX,RDX\n.text:001015b5   31ce                 XOR         ESI,ECX\n.text:001015b7   89f2                 MOV         EDX,ESI\n.text:001015b9   8810                 MOV         byte ptr [RAX],DL\n.text:001015bb   488345f801           ADD         qword ptr [RBP + local_10+0x8],0x1\n                                  LAB_001015c0:\n.text:001015c0   8b45c4               MOV         EAX,dword ptr [RBP + local_44+0x8]\n.text:001015c3   4898                 CDQE\n.text:001015c5   483945f8             CMP         qword ptr [RBP + local_10+0x8],RAX\n.text:001015c9   0f8226ffffff         JC          LAB_001014f5\n.text:001015cf   b800000000           MOV         EAX,0x0\n.text:001015d4   c9                   LEAVE\n.text:001015d5   c3                   RET\n",
  "free": "; void free(void * __ptr)\n; Parameters:\n; __ptr          void *         RDI\n; Stack variables:\n                                  free:\n.plt.sec:001010f0 f30f1efa             ENDBR64\n.plt.sec:001010f4 f2ff25854e0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::free]               ; void free(void * __ptr)\n; void free(void * __ptr)\n; Parameters:\n; __ptr          void *         RDI\n; Stack variables:\n                                  ; free@@GLIBC_2.2.5\n                                  free:\nEXTERNAL:00107000                      ??          ??\n",
  "frame_dummy": "; undefined frame_dummy()\n; Parameters:\n; Stack variables:\n                                  frame_dummy:\n.text:00101280   f30f1efa             ENDBR64\n.text:00101284   e977ffffff           JMP         register_tm_clones                           ; undefined register_tm_clones()\n",
  "_ITM_registerTMCloneTable": "; undefined _ITM_registerTMCloneTable()\n; Parameters:\n; Stack variables:\n                                  _ITM_registerTMCloneTable:\nEXTERNAL:00107070                      ??          ??\n",
  "add": "; undefined add()\n; Parameters:\n; Stack variables:\n; local_c        undefined4     -0xc\n; local_10       undefined4     -0x10\n; local_20       undefined8     -0x20\n                                  add:\n.text:00101815   f30f1efa             ENDBR64\n.text:00101819   55                   PUSH        RBP\n.text:0010181a   4889e5               MOV         RBP,RSP\n.text:0010181d   4883ec20             SUB         RSP,0x20\n.text:00101821   48897de8             MOV         qword ptr [RBP + local_20+0x8],RDI\n.text:00101825   c745f800000000       MOV         dword ptr [RBP + local_10+0x8],0x0\n.text:0010182c   eb04                 JMP         LAB_00101832\n                                  LAB_0010182e:\n.text:0010182e   8345f801             ADD         dword ptr [RBP + local_10+0x8],0x1\n                                  LAB_00101832:\n.text:00101832   837df809             CMP         dword ptr [RBP + local_10+0x8],0x9\n.text:00101836   7f13                 JG          LAB_0010184b\n.text:00101838   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:0010183c   8b55f8               MOV         EDX,dword ptr [RBP + local_10+0x8]\n.text:0010183f   4863d2               MOVSXD      RDX,EDX\n.text:00101842   488b04d0             MOV         RAX,qword ptr [RAX + RDX*0x8]\n.text:00101846   4885c0               TEST        RAX,RAX\n.text:00101849   75e3                 JNZ         LAB_0010182e\n                                  LAB_0010184b:\n.text:0010184b   488d3db9170000       LEA         RDI,[s_Enter_the_size_of_your_item:_0010300b]     ; \u003d \"Enter the size of your item:\"\n.text:00101852   e8a9f8ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:00101857   b800000000           MOV         EAX,0x0\n.text:0010185c   e845ffffff           CALL        read_int                                     ; undefined read_int()\n.text:00101861   8945fc               MOV         dword ptr [RBP + local_c+0x8],EAX\n.text:00101864   817dfcff0f0000       CMP         dword ptr [RBP + local_c+0x8],0xfff\n.text:0010186b   7f32                 JG          LAB_0010189f\n.text:0010186d   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:00101871   8b55f8               MOV         EDX,dword ptr [RBP + local_10+0x8]\n.text:00101874   4863d2               MOVSXD      RDX,EDX\n.text:00101877   488d4a14             LEA         RCX,[RDX + 0x14]\n.text:0010187b   8b55fc               MOV         EDX,dword ptr [RBP + local_c+0x8]\n.text:0010187e   891488               MOV         dword ptr [RAX + RCX*0x4],EDX\n.text:00101881   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:00101884   4898                 CDQE\n.text:00101886   4889c7               MOV         RDI,RAX\n.text:00101889   e8d2f8ffff           CALL        \u003cEXTERNAL\u003e::malloc                           ; void * malloc(size_t __size)\n.text:0010188e   4889c1               MOV         RCX,RAX\n.text:00101891   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:00101895   8b55f8               MOV         EDX,dword ptr [RBP + local_10+0x8]\n.text:00101898   4863d2               MOVSXD      RDX,EDX\n.text:0010189b   48890cd0             MOV         qword ptr [RAX + RDX*0x8],RCX\n                                  LAB_0010189f:\n.text:0010189f   90                   NOP\n.text:001018a0   c9                   LEAVE\n.text:001018a1   c3                   RET\n",
  "__cxa_finalize": "; undefined __cxa_finalize()\n; Parameters:\n; Stack variables:\n                                  ; __cxa_finalize@@GLIBC_2.2.5\n                                  __cxa_finalize:\nEXTERNAL:00107078                      ??          ??\n",
  "malloc": "; void * malloc(size_t __size)\n; Parameters:\n; __size         size_t         RDI\n; Stack variables:\n                                  malloc:\n.plt.sec:00101160 f30f1efa             ENDBR64\n.plt.sec:00101164 f2ff254d4e0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::malloc]             ; void * malloc(size_t __size)\n; void * malloc(size_t __size)\n; Parameters:\n; __size         size_t         RDI\n; Stack variables:\n                                  ; malloc@@GLIBC_2.2.5\n                                  malloc:\nEXTERNAL:00107050                      ??          ??\n",
  "register_tm_clones": "; undefined register_tm_clones()\n; Parameters:\n; Stack variables:\n                                  register_tm_clones:\n.text:00101200   488d3d094e0000       LEA         RDI,[__TMC_END__]\n.text:00101207   488d35024e0000       LEA         RSI,[__TMC_END__]\n.text:0010120e   4829fe               SUB         RSI,RDI\n.text:00101211   4889f0               MOV         RAX,RSI\n.text:00101214   48c1ee3f             SHR         RSI,0x3f\n.text:00101218   48c1f803             SAR         RAX,0x3\n.text:0010121c   4801c6               ADD         RSI,RAX\n.text:0010121f   48d1fe               SAR         RSI,0x1\n.text:00101222   7414                 JZ          LAB_00101238\n.text:00101224   488b05c54d0000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable,qword ptr [-\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable]     ; \u003d ??, \u003d 00107070\n.text:0010122b   4885c0               TEST        RAX,RAX\n.text:0010122e   7408                 JZ          LAB_00101238\n.text:00101230   ffe0                 JMP         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable     ; undefined _ITM_registerTMCloneTable()\n                                  LAB_00101238:\n.text:00101238   c3                   RET\n",
  "read": "; ssize_t read(int __fd, void * __buf, size_t __nbytes)\n; Parameters:\n; __fd           int            EDI\n; __buf          void *         RSI\n; __nbytes       size_t         RDX\n; Stack variables:\n                                  read:\n.plt.sec:00101140 f30f1efa             ENDBR64\n.plt.sec:00101144 f2ff255d4e0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::read]               ; ssize_t read(int __fd, void * __buf, size_t __nbytes)\n; ssize_t read(int __fd, void * __buf, size_t __nbytes)\n; Parameters:\n; __fd           int            EDI\n; __buf          void *         RSI\n; __nbytes       size_t         RDX\n; Stack variables:\n                                  ; read@@GLIBC_2.2.5\n                                  read:\nEXTERNAL:00107030                      ??          ??\n",
  "set": "; undefined set()\n; Parameters:\n; Stack variables:\n; local_c        undefined4     -0xc\n; local_10       undefined4     -0x10\n; local_14       undefined4     -0x14\n; local_18       undefined4     -0x18\n; local_20       undefined8     -0x20\n; local_24       undefined4     -0x24\n                                  set:\n.text:001018a2   f30f1efa             ENDBR64\n.text:001018a6   55                   PUSH        RBP\n.text:001018a7   4889e5               MOV         RBP,RSP\n.text:001018aa   4883ec20             SUB         RSP,0x20\n.text:001018ae   48897de8             MOV         qword ptr [RBP + local_20+0x8],RDI\n.text:001018b2   8975e4               MOV         dword ptr [RBP + local_24+0x8],ESI\n.text:001018b5   488d3d6c170000       LEA         RDI,[s_Enter_the_item_you_want_to_modif_00103028]     ; \u003d \"Enter the item you want to modify:\"\n.text:001018bc   e83ff8ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:001018c1   b800000000           MOV         EAX,0x0\n.text:001018c6   e8dbfeffff           CALL        read_int                                     ; undefined read_int()\n.text:001018cb   8945f0               MOV         dword ptr [RBP + local_18+0x8],EAX\n.text:001018ce   837df009             CMP         dword ptr [RBP + local_18+0x8],0x9\n.text:001018d2   0f8f60010000         JG          LAB_00101a38\n.text:001018d8   837de400             CMP         dword ptr [RBP + local_24+0x8],0x0\n.text:001018dc   0f84d9000000         JZ          LAB_001019bb\n.text:001018e2   488d3d67170000       LEA         RDI,[s_Enter_the_key_number_you_want_to_00103050]     ; \u003d \"Enter the key number you want to use to securely store the content with:\"\n.text:001018e9   e812f8ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:001018ee   b800000000           MOV         EAX,0x0\n.text:001018f3   e8aefeffff           CALL        read_int                                     ; undefined read_int()\n.text:001018f8   8945f8               MOV         dword ptr [RBP + local_10+0x8],EAX\n.text:001018fb   837df800             CMP         dword ptr [RBP + local_10+0x8],0x0\n.text:001018ff   7823                 JS          LAB_00101924\n.text:00101901   837df809             CMP         dword ptr [RBP + local_10+0x8],0x9\n.text:00101905   7f1d                 JG          LAB_00101924\n.text:00101907   8b45f8               MOV         EAX,dword ptr [RBP + local_10+0x8]\n.text:0010190a   4898                 CDQE\n.text:0010190c   488d14c500000000     LEA         RDX,[RAX*0x8]\n.text:00101914   488d05a5470000       LEA         RAX,[keys]\n.text:0010191b   488b0402             MOV         RAX\u003d\u003ekeys,qword ptr [RDX + RAX*0x1]\n.text:0010191f   4885c0               TEST        RAX,RAX\n.text:00101922   7511                 JNZ         LAB_00101935\n                                  LAB_00101924:\n.text:00101924   488d3d6e170000       LEA         RDI,[s_Invalid_key._00103099]                ; \u003d \"Invalid key.\"\n.text:0010192b   e8d0f7ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:00101930   e903010000           JMP         LAB_00101a38\n                                  LAB_00101935:\n.text:00101935   488d3d6c170000       LEA         RDI,[s_Enter_the_size_of_the_content:_001030a8]     ; \u003d \"Enter the size of the content:\"\n.text:0010193c   e8bff7ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:00101941   b800000000           MOV         EAX,0x0\n.text:00101946   e85bfeffff           CALL        read_int                                     ; undefined read_int()\n.text:0010194b   8945fc               MOV         dword ptr [RBP + local_c+0x8],EAX\n.text:0010194e   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:00101952   8b55f0               MOV         EDX,dword ptr [RBP + local_18+0x8]\n.text:00101955   4863d2               MOVSXD      RDX,EDX\n.text:00101958   4883c214             ADD         RDX,0x14\n.text:0010195c   8b0490               MOV         EAX,dword ptr [RAX + RDX*0x4]\n.text:0010195f   3945fc               CMP         dword ptr [RBP + local_c+0x8],EAX\n.text:00101962   7d44                 JGE         LAB_001019a8\n.text:00101964   488d3d5c170000       LEA         RDI,[s_Enter_the_content:_001030c7]          ; \u003d \"Enter the content:\"\n.text:0010196b   e890f7ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:00101970   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:00101973   4863d0               MOVSXD      RDX,EAX\n.text:00101976   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:0010197a   8b4df0               MOV         ECX,dword ptr [RBP + local_18+0x8]\n.text:0010197d   4863c9               MOVSXD      RCX,ECX\n.text:00101980   488b04c8             MOV         RAX,qword ptr [RAX + RCX*0x8]\n.text:00101984   4889c6               MOV         RSI,RAX\n.text:00101987   bf00000000           MOV         EDI,0x0\n.text:0010198c   e8aff7ffff           CALL        \u003cEXTERNAL\u003e::read                             ; ssize_t read(int __fd, void * __buf, size_t __nbytes)\n.text:00101991   8b55fc               MOV         EDX,dword ptr [RBP + local_c+0x8]\n.text:00101994   8b4df8               MOV         ECX,dword ptr [RBP + local_10+0x8]\n.text:00101997   8b45f0               MOV         EAX,dword ptr [RBP + local_18+0x8]\n.text:0010199a   89ce                 MOV         ESI,ECX\n.text:0010199c   89c7                 MOV         EDI,EAX\n.text:0010199e   e833fcffff           CALL        secure_stuff                                 ; undefined secure_stuff()\n.text:001019a3   e990000000           JMP         LAB_00101a38\n                                  LAB_001019a8:\n.text:001019a8   488d3d2b170000       LEA         RDI,[s_Invalid_size._001030da]               ; \u003d \"Invalid size.\"\n.text:001019af   b800000000           MOV         EAX,0x0\n.text:001019b4   e877f7ffff           CALL        \u003cEXTERNAL\u003e::printf                           ; int printf(char * __format, ...)\n.text:001019b9   eb7d                 JMP         LAB_00101a38\n                                  LAB_001019bb:\n.text:001019bb   488d3de6160000       LEA         RDI,[s_Enter_the_size_of_the_content:_001030a8]     ; \u003d \"Enter the size of the content:\"\n.text:001019c2   e839f7ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:001019c7   b800000000           MOV         EAX,0x0\n.text:001019cc   e8d5fdffff           CALL        read_int                                     ; undefined read_int()\n.text:001019d1   8945f4               MOV         dword ptr [RBP + local_14+0x8],EAX\n.text:001019d4   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:001019d8   8b55f0               MOV         EDX,dword ptr [RBP + local_18+0x8]\n.text:001019db   4863d2               MOVSXD      RDX,EDX\n.text:001019de   4883c214             ADD         RDX,0x14\n.text:001019e2   8b0490               MOV         EAX,dword ptr [RAX + RDX*0x4]\n.text:001019e5   3945f4               CMP         dword ptr [RBP + local_14+0x8],EAX\n.text:001019e8   7d3d                 JGE         LAB_00101a27\n.text:001019ea   488d3dd6160000       LEA         RDI,[s_Enter_the_content:_001030c7]          ; \u003d \"Enter the content:\"\n.text:001019f1   e80af7ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:001019f6   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:001019fa   8b55f0               MOV         EDX,dword ptr [RBP + local_18+0x8]\n.text:001019fd   4863d2               MOVSXD      RDX,EDX\n.text:00101a00   4883c214             ADD         RDX,0x14\n.text:00101a04   8b0490               MOV         EAX,dword ptr [RAX + RDX*0x4]\n.text:00101a07   4863d0               MOVSXD      RDX,EAX\n.text:00101a0a   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:00101a0e   8b4df0               MOV         ECX,dword ptr [RBP + local_18+0x8]\n.text:00101a11   4863c9               MOVSXD      RCX,ECX\n.text:00101a14   488b04c8             MOV         RAX,qword ptr [RAX + RCX*0x8]\n.text:00101a18   4889c6               MOV         RSI,RAX\n.text:00101a1b   bf00000000           MOV         EDI,0x0\n.text:00101a20   e81bf7ffff           CALL        \u003cEXTERNAL\u003e::read                             ; ssize_t read(int __fd, void * __buf, size_t __nbytes)\n.text:00101a25   eb11                 JMP         LAB_00101a38\n                                  LAB_00101a27:\n.text:00101a27   488d3dac160000       LEA         RDI,[s_Invalid_size._001030da]               ; \u003d \"Invalid size.\"\n.text:00101a2e   b800000000           MOV         EAX,0x0\n.text:00101a33   e8f8f6ffff           CALL        \u003cEXTERNAL\u003e::printf                           ; int printf(char * __format, ...)\n                                  LAB_00101a38:\n.text:00101a38   c9                   LEAVE\n.text:00101a39   c3                   RET\n",
  "swap": "; undefined swap()\n; Parameters:\n; Stack variables:\n; local_c        undefined4     -0xc\n; local_20       undefined8     -0x20\n; local_28       undefined8     -0x28\n                                  swap:\n.text:00101289   f30f1efa             ENDBR64\n.text:0010128d   55                   PUSH        RBP\n.text:0010128e   4889e5               MOV         RBP,RSP\n.text:00101291   48897de8             MOV         qword ptr [RBP + local_20+0x8],RDI\n.text:00101295   488975e0             MOV         qword ptr [RBP + local_28+0x8],RSI\n.text:00101299   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:0010129d   0fb600               MOVZX       EAX,byte ptr [RAX]\n.text:001012a0   0fb6c0               MOVZX       EAX,AL\n.text:001012a3   8945fc               MOV         dword ptr [RBP + local_c+0x8],EAX\n.text:001012a6   488b45e0             MOV         RAX,qword ptr [RBP + local_28+0x8]\n.text:001012aa   0fb610               MOVZX       EDX,byte ptr [RAX]\n.text:001012ad   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:001012b1   8810                 MOV         byte ptr [RAX],DL\n.text:001012b3   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:001012b6   89c2                 MOV         EDX,EAX\n.text:001012b8   488b45e0             MOV         RAX,qword ptr [RBP + local_28+0x8]\n.text:001012bc   8810                 MOV         byte ptr [RAX],DL\n.text:001012be   90                   NOP\n.text:001012bf   5d                   POP         RBP\n.text:001012c0   c3                   RET\n",
  "__gmon_start__": "; undefined __gmon_start__()\n; Parameters:\n; Stack variables:\n                                  __gmon_start__:\nEXTERNAL:00107048                      ??          ??\n",
  "menu": "; undefined menu()\n; Parameters:\n; Stack variables:\n; local_c        undefined4     -0xc\n; local_10       undefined4     -0x10\n                                  menu:\n.text:00101b1e   f30f1efa             ENDBR64\n.text:00101b22   55                   PUSH        RBP\n.text:00101b23   4889e5               MOV         RBP,RSP\n.text:00101b26   4883ec10             SUB         RSP,0x10\n.text:00101b2a   488d3d1f160000       LEA         RDI,[s_Do_you_want_to_work_with_keys_or_00103150]     ; \u003d \"Do you want to work with keys or content?\"\n.text:00101b31   e8caf5ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:00101b36   488d3d3d160000       LEA         RDI,[s_1._Keys_2._Content_3._Exit_0010317a]     ; \u003d \"1. Keys \\n2. Content\\n3. Exit\"\n.text:00101b3d   e8bef5ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:00101b42   488d3d4d160000       LEA         RDI,[DAT_00103196]                           ; \u003d 3Eh    \u003e\n.text:00101b49   e8b2f5ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:00101b4e   b800000000           MOV         EAX,0x0\n.text:00101b53   e84efcffff           CALL        read_int                                     ; undefined read_int()\n.text:00101b58   8945f8               MOV         dword ptr [RBP + local_10+0x8],EAX\n.text:00101b5b   836df801             SUB         dword ptr [RBP + local_10+0x8],0x1\n.text:00101b5f   837df800             CMP         dword ptr [RBP + local_10+0x8],0x0\n.text:00101b63   740a                 JZ          LAB_00101b6f\n.text:00101b65   837df801             CMP         dword ptr [RBP + local_10+0x8],0x1\n.text:00101b69   0f8509010000         JNZ         LAB_00101c78\n                                  LAB_00101b6f:\n.text:00101b6f   488d3d22160000       LEA         RDI,[s__Select_one_of_the_following_opt_00103198]     ; \u003d \"\\nSelect one of the following options: \"\n.text:00101b76   e885f5ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:00101b7b   488d3d3e160000       LEA         RDI,[s_1._Add_2._Delete_3._Modify_4._Sh_001031c0]     ; \u003d \"1. Add \\n2. Delete\\n3. Modify\\n4. Show\\n5. Exit\"\n.text:00101b82   e879f5ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:00101b87   488d3d08160000       LEA         RDI,[DAT_00103196]                           ; \u003d 3Eh    \u003e\n.text:00101b8e   e86df5ffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:00101b93   b800000000           MOV         EAX,0x0\n.text:00101b98   e809fcffff           CALL        read_int                                     ; undefined read_int()\n.text:00101b9d   8945fc               MOV         dword ptr [RBP + local_c+0x8],EAX\n.text:00101ba0   837dfc01             CMP         dword ptr [RBP + local_c+0x8],0x1\n.text:00101ba4   7528                 JNZ         LAB_00101bce\n.text:00101ba6   837df800             CMP         dword ptr [RBP + local_10+0x8],0x0\n.text:00101baa   7511                 JNZ         LAB_00101bbd\n.text:00101bac   488d3d0d450000       LEA         RDI,[keys]\n.text:00101bb3   e85dfcffff           CALL        add                                          ; undefined add()\n.text:00101bb8   e9b4000000           JMP         LAB_00101c71\n                                  LAB_00101bbd:\n.text:00101bbd   488d3d7c440000       LEA         RDI,[content]\n.text:00101bc4   e84cfcffff           CALL        add                                          ; undefined add()\n.text:00101bc9   e9a3000000           JMP         LAB_00101c71\n                                  LAB_00101bce:\n.text:00101bce   837dfc02             CMP         dword ptr [RBP + local_c+0x8],0x2\n.text:00101bd2   752f                 JNZ         LAB_00101c03\n.text:00101bd4   837df800             CMP         dword ptr [RBP + local_10+0x8],0x0\n.text:00101bd8   7516                 JNZ         LAB_00101bf0\n.text:00101bda   be01000000           MOV         ESI,0x1\n.text:00101bdf   488d3dda440000       LEA         RDI,[keys]\n.text:00101be6   e84ffeffff           CALL        delete                                       ; undefined delete()\n.text:00101beb   e981000000           JMP         LAB_00101c71\n                                  LAB_00101bf0:\n.text:00101bf0   be00000000           MOV         ESI,0x0\n.text:00101bf5   488d3d44440000       LEA         RDI,[content]\n.text:00101bfc   e839feffff           CALL        delete                                       ; undefined delete()\n.text:00101c01   eb6e                 JMP         LAB_00101c71\n                                  LAB_00101c03:\n.text:00101c03   837dfc03             CMP         dword ptr [RBP + local_c+0x8],0x3\n.text:00101c07   752c                 JNZ         LAB_00101c35\n.text:00101c09   837df800             CMP         dword ptr [RBP + local_10+0x8],0x0\n.text:00101c0d   7513                 JNZ         LAB_00101c22\n.text:00101c0f   be00000000           MOV         ESI,0x0\n.text:00101c14   488d3da5440000       LEA         RDI,[keys]\n.text:00101c1b   e882fcffff           CALL        set                                          ; undefined set()\n.text:00101c20   eb4f                 JMP         LAB_00101c71\n                                  LAB_00101c22:\n.text:00101c22   be01000000           MOV         ESI,0x1\n.text:00101c27   488d3d12440000       LEA         RDI,[content]\n.text:00101c2e   e86ffcffff           CALL        set                                          ; undefined set()\n.text:00101c33   eb3c                 JMP         LAB_00101c71\n                                  LAB_00101c35:\n.text:00101c35   837dfc04             CMP         dword ptr [RBP + local_c+0x8],0x4\n.text:00101c39   7522                 JNZ         LAB_00101c5d\n.text:00101c3b   837df800             CMP         dword ptr [RBP + local_10+0x8],0x0\n.text:00101c3f   750e                 JNZ         LAB_00101c4f\n.text:00101c41   488d3d78440000       LEA         RDI,[keys]\n.text:00101c48   e86bfeffff           CALL        show                                         ; undefined show()\n.text:00101c4d   eb22                 JMP         LAB_00101c71\n                                  LAB_00101c4f:\n.text:00101c4f   488d3dea430000       LEA         RDI,[content]\n.text:00101c56   e85dfeffff           CALL        show                                         ; undefined show()\n.text:00101c5b   eb14                 JMP         LAB_00101c71\n                                  LAB_00101c5d:\n.text:00101c5d   837dfc05             CMP         dword ptr [RBP + local_c+0x8],0x5\n.text:00101c61   7507                 JNZ         LAB_00101c6a\n.text:00101c63   b801000000           MOV         EAX,0x1\n.text:00101c68   eb13                 JMP         LAB_00101c7d\n                                  LAB_00101c6a:\n.text:00101c6a   b801000000           MOV         EAX,0x1\n.text:00101c6f   eb0c                 JMP         LAB_00101c7d\n                                  LAB_00101c71:\n.text:00101c71   b800000000           MOV         EAX,0x0\n.text:00101c76   eb05                 JMP         LAB_00101c7d\n                                  LAB_00101c78:\n.text:00101c78   b801000000           MOV         EAX,0x1\n                                  LAB_00101c7d:\n.text:00101c7d   c9                   LEAVE\n.text:00101c7e   c3                   RET\n",
  "puts": "; int puts(char * __s)\n; Parameters:\n; __s            char *         RDI\n; Stack variables:\n                                  puts:\n.plt.sec:00101100 f30f1efa             ENDBR64\n.plt.sec:00101104 f2ff257d4e0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::puts]               ; int puts(char * __s)\n; int puts(char * __s)\n; Parameters:\n; __s            char *         RDI\n; Stack variables:\n                                  ; puts@@GLIBC_2.2.5\n                                  puts:\nEXTERNAL:00107010                      ??          ??\n",
  "__libc_csu_fini": "; undefined __libc_csu_fini()\n; Parameters:\n; Stack variables:\n                                  __libc_csu_fini:\n.text:001020c0   f30f1efa             ENDBR64\n.text:001020c4   c3                   RET\n",
  "__isoc99_sscanf": "; undefined __isoc99_sscanf()\n; Parameters:\n; Stack variables:\n                                  __isoc99_sscanf:\n.plt.sec:00101180 f30f1efa             ENDBR64\n.plt.sec:00101184 f2ff253d4e0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__isoc99_sscanf]     ; undefined __isoc99_sscanf()\n; undefined __isoc99_sscanf()\n; Parameters:\n; Stack variables:\n                                  ; __isoc99_sscanf@@GLIBC_2.7\n                                  __isoc99_sscanf:\nEXTERNAL:00107060                      ??          ??\n",
  "__do_global_dtors_aux": "; undefined __do_global_dtors_aux()\n; Parameters:\n; Stack variables:\n                                  __do_global_dtors_aux:\n.text:00101240   f30f1efa             ENDBR64\n.text:00101244   803ded4d000000       CMP         byte ptr [completed.8061],0x0\n.text:0010124b   752b                 JNZ         LAB_00101278\n.text:0010124d   55                   PUSH        RBP\n.text:0010124e   48833da24d000000     CMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__cxa_finalize],0x0     ; \u003d 00107078\n.text:00101256   4889e5               MOV         RBP,RSP\n.text:00101259   740c                 JZ          LAB_00101267\n.text:0010125b   488b3da64d0000       MOV         RDI,qword ptr [-\u003e__dso_handle]               ; \u003d 00106008\n.text:00101262   e879feffff           CALL        FUN_001010e0                                 ; undefined FUN_001010e0()\n                                  LAB_00101267:\n.text:00101267   e864ffffff           CALL        deregister_tm_clones                         ; undefined deregister_tm_clones()\n.text:0010126c   c605c54d000001       MOV         byte ptr [completed.8061],0x1\n.text:00101273   5d                   POP         RBP\n.text:00101274   c3                   RET\n                                  LAB_00101278:\n.text:00101278   c3                   RET\n",
  "_fini": "; undefined _fini()\n; Parameters:\n; Stack variables:\n                                  _fini:\n.fini:001020c8   f30f1efa             ENDBR64\n.fini:001020cc   4883ec08             SUB         RSP,0x8\n.fini:001020d0   4883c408             ADD         RSP,0x8\n.fini:001020d4   c3                   RET\n",
  "PRGA": "; undefined PRGA()\n; Parameters:\n; Stack variables:\n; local_10       undefined8     -0x10\n; local_18       undefined8     -0x18\n; local_1c       undefined4     -0x1c\n; local_20       undefined4     -0x20\n; local_24       undefined4     -0x24\n; local_30       undefined8     -0x30\n; local_38       undefined8     -0x38\n; local_40       undefined8     -0x40\n                                  PRGA:\n.text:0010139e   f30f1efa             ENDBR64\n.text:001013a2   55                   PUSH        RBP\n.text:001013a3   4889e5               MOV         RBP,RSP\n.text:001013a6   4883ec40             SUB         RSP,0x40\n.text:001013aa   48897dd8             MOV         qword ptr [RBP + local_30+0x8],RDI\n.text:001013ae   488975d0             MOV         qword ptr [RBP + local_38+0x8],RSI\n.text:001013b2   488955c8             MOV         qword ptr [RBP + local_40+0x8],RDX\n.text:001013b6   c745e400000000       MOV         dword ptr [RBP + local_24+0x8],0x0\n.text:001013bd   c745e800000000       MOV         dword ptr [RBP + local_20+0x8],0x0\n.text:001013c4   48c745f000000000     MOV         qword ptr [RBP + local_18+0x8],0x0\n.text:001013cc   488b45d0             MOV         RAX,qword ptr [RBP + local_38+0x8]\n.text:001013d0   4889c7               MOV         RDI,RAX\n.text:001013d3   e838fdffff           CALL        \u003cEXTERNAL\u003e::strlen                           ; size_t strlen(char * __s)\n.text:001013d8   488945f8             MOV         qword ptr [RBP + local_10+0x8],RAX\n.text:001013dc   e9c9000000           JMP         LAB_001014aa\n                                  LAB_001013e1:\n.text:001013e1   8b45e4               MOV         EAX,dword ptr [RBP + local_24+0x8]\n.text:001013e4   8d5001               LEA         EDX,[RAX + 0x1]\n.text:001013e7   89d0                 MOV         EAX,EDX\n.text:001013e9   c1f81f               SAR         EAX,0x1f\n.text:001013ec   c1e818               SHR         EAX,0x18\n.text:001013ef   01c2                 ADD         EDX,EAX\n.text:001013f1   0fb6d2               MOVZX       EDX,DL\n.text:001013f4   29c2                 SUB         EDX,EAX\n.text:001013f6   89d0                 MOV         EAX,EDX\n.text:001013f8   8945e4               MOV         dword ptr [RBP + local_24+0x8],EAX\n.text:001013fb   8b45e4               MOV         EAX,dword ptr [RBP + local_24+0x8]\n.text:001013fe   4863d0               MOVSXD      RDX,EAX\n.text:00101401   488b45d8             MOV         RAX,qword ptr [RBP + local_30+0x8]\n.text:00101405   4801d0               ADD         RAX,RDX\n.text:00101408   0fb600               MOVZX       EAX,byte ptr [RAX]\n.text:0010140b   0fb6d0               MOVZX       EDX,AL\n.text:0010140e   8b45e8               MOV         EAX,dword ptr [RBP + local_20+0x8]\n.text:00101411   01c2                 ADD         EDX,EAX\n.text:00101413   89d0                 MOV         EAX,EDX\n.text:00101415   c1f81f               SAR         EAX,0x1f\n.text:00101418   c1e818               SHR         EAX,0x18\n.text:0010141b   01c2                 ADD         EDX,EAX\n.text:0010141d   0fb6d2               MOVZX       EDX,DL\n.text:00101420   29c2                 SUB         EDX,EAX\n.text:00101422   89d0                 MOV         EAX,EDX\n.text:00101424   8945e8               MOV         dword ptr [RBP + local_20+0x8],EAX\n.text:00101427   8b45e8               MOV         EAX,dword ptr [RBP + local_20+0x8]\n.text:0010142a   4863d0               MOVSXD      RDX,EAX\n.text:0010142d   488b45d8             MOV         RAX,qword ptr [RBP + local_30+0x8]\n.text:00101431   4801c2               ADD         RDX,RAX\n.text:00101434   8b45e4               MOV         EAX,dword ptr [RBP + local_24+0x8]\n.text:00101437   4863c8               MOVSXD      RCX,EAX\n.text:0010143a   488b45d8             MOV         RAX,qword ptr [RBP + local_30+0x8]\n.text:0010143e   4801c8               ADD         RAX,RCX\n.text:00101441   4889d6               MOV         RSI,RDX\n.text:00101444   4889c7               MOV         RDI,RAX\n.text:00101447   e83dfeffff           CALL        swap                                         ; undefined swap()\n.text:0010144c   8b45e4               MOV         EAX,dword ptr [RBP + local_24+0x8]\n.text:0010144f   4863d0               MOVSXD      RDX,EAX\n.text:00101452   488b45d8             MOV         RAX,qword ptr [RBP + local_30+0x8]\n.text:00101456   4801d0               ADD         RAX,RDX\n.text:00101459   0fb610               MOVZX       EDX,byte ptr [RAX]\n.text:0010145c   8b45e8               MOV         EAX,dword ptr [RBP + local_20+0x8]\n.text:0010145f   4863c8               MOVSXD      RCX,EAX\n.text:00101462   488b45d8             MOV         RAX,qword ptr [RBP + local_30+0x8]\n.text:00101466   4801c8               ADD         RAX,RCX\n.text:00101469   0fb600               MOVZX       EAX,byte ptr [RAX]\n.text:0010146c   01d0                 ADD         EAX,EDX\n.text:0010146e   0fb6d0               MOVZX       EDX,AL\n.text:00101471   488b45d8             MOV         RAX,qword ptr [RBP + local_30+0x8]\n.text:00101475   4801d0               ADD         RAX,RDX\n.text:00101478   0fb600               MOVZX       EAX,byte ptr [RAX]\n.text:0010147b   0fb6c0               MOVZX       EAX,AL\n.text:0010147e   8945ec               MOV         dword ptr [RBP + local_1c+0x8],EAX\n.text:00101481   488b55d0             MOV         RDX,qword ptr [RBP + local_38+0x8]\n.text:00101485   488b45f0             MOV         RAX,qword ptr [RBP + local_18+0x8]\n.text:00101489   4801d0               ADD         RAX,RDX\n.text:0010148c   0fb600               MOVZX       EAX,byte ptr [RAX]\n.text:0010148f   8b55ec               MOV         EDX,dword ptr [RBP + local_1c+0x8]\n.text:00101492   31d0                 XOR         EAX,EDX\n.text:00101494   89c1                 MOV         ECX,EAX\n.text:00101496   488b55c8             MOV         RDX,qword ptr [RBP + local_40+0x8]\n.text:0010149a   488b45f0             MOV         RAX,qword ptr [RBP + local_18+0x8]\n.text:0010149e   4801d0               ADD         RAX,RDX\n.text:001014a1   89ca                 MOV         EDX,ECX\n.text:001014a3   8810                 MOV         byte ptr [RAX],DL\n.text:001014a5   488345f001           ADD         qword ptr [RBP + local_18+0x8],0x1\n                                  LAB_001014aa:\n.text:001014aa   488b45f0             MOV         RAX,qword ptr [RBP + local_18+0x8]\n.text:001014ae   483b45f8             CMP         RAX,qword ptr [RBP + local_10+0x8]\n.text:001014b2   0f8229ffffff         JC          LAB_001013e1\n.text:001014b8   b800000000           MOV         EAX,0x0\n.text:001014bd   c9                   LEAVE\n.text:001014be   c3                   RET\n"
}