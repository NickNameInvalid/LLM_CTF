{
  "setvbuf": "; int setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n; Parameters:\n; __stream       FILE *         RDI\n; __buf          char *         RSI\n; __modes        int            EDX\n; __n            size_t         RCX\n; Stack variables:\n                                  setvbuf:\n.plt.sec:004010e0 f30f1efa             ENDBR64\n.plt.sec:004010e4 f2ff254dbfc807       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::setvbuf]            ; int setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n; int setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n; Parameters:\n; __stream       FILE *         RDI\n; __buf          char *         RSI\n; __modes        int            EDX\n; __n            size_t         RCX\n; Stack variables:\n                                  ; setvbuf@@GLIBC_2.2.5\n                                  setvbuf:\nEXTERNAL:0808e030                      ??          ??\n",
  "play": "; undefined play()\n; Parameters:\n; Stack variables:\n; local_c        undefined4     -0xc\n; local_18       undefined8     -0x18\n                                  play:\n.text:0808a136   f30f1efa             ENDBR64\n.text:0808a13a   55                   PUSH        RBP\n.text:0808a13b   4889e5               MOV         RBP,RSP\n.text:0808a13e   4883ec10             SUB         RSP,0x10\n.text:0808a142   c745fc00000000       MOV         dword ptr [RBP + local_c+0x8],0x0\n.text:0808a149   48c745f000000000     MOV         qword ptr [RBP + local_18+0x8],0x0\n.text:0808a151   488d3db00e0000       LEA         RDI,[s_Enter_the_number_(0-36)_you_thin_0808b008]     ; \u003d \"Enter the number (0-36) you think the roulette will land on: \"\n.text:0808a158   e8436f37f8           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:0808a15d   488d45fc             LEA         RAX\u003d\u003elocal_c,[RBP + -0x4]\n.text:0808a161   4889c6               MOV         RSI,RAX\n.text:0808a164   488d3ddb0e0000       LEA         RDI,[DAT_0808b046]                           ; \u003d 25h    %\n.text:0808a16b   b800000000           MOV         EAX,0x0\n.text:0808a170   e87b6f37f8           CALL        \u003cEXTERNAL\u003e::__isoc99_scanf                   ; undefined __isoc99_scanf()\n.text:0808a175   488d3dd40e0000       LEA         RDI,[s_Enter_the_amount_you_want_to_wag_0808b050]     ; \u003d \"Enter the amount you want to wager: \"\n.text:0808a17c   e81f6f37f8           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:0808a181   488d45f0             LEA         RAX\u003d\u003elocal_18,[RBP + -0x10]\n.text:0808a185   4889c6               MOV         RSI,RAX\n.text:0808a188   488d3de60e0000       LEA         RDI,[DAT_0808b075]                           ; \u003d 25h    %\n.text:0808a18f   b800000000           MOV         EAX,0x0\n.text:0808a194   e8576f37f8           CALL        \u003cEXTERNAL\u003e::__isoc99_scanf                   ; undefined __isoc99_scanf()\n.text:0808a199   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:0808a19c   4898                 CDQE\n.text:0808a19e   488d14c500000000     LEA         RDX,[RAX*0x8]\n.text:0808a1a6   488d05332f0000       LEA         RAX,[bets]\n.text:0808a1ad   488b0c02             MOV         RCX,qword ptr [RDX + RAX*0x1]\u003d\u003ebets\n.text:0808a1b1   488b55f0             MOV         RDX,qword ptr [RBP + local_18+0x8]\n.text:0808a1b5   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:0808a1b8   4801d1               ADD         RCX,RDX\n.text:0808a1bb   4898                 CDQE\n.text:0808a1bd   488d14c500000000     LEA         RDX,[RAX*0x8]\n.text:0808a1c5   488d05142f0000       LEA         RAX,[bets]\n.text:0808a1cc   48890c02             MOV         qword ptr [RDX + RAX*0x1]\u003d\u003ebets,RCX\n.text:0808a1d0   b800000000           MOV         EAX,0x0\n.text:0808a1d5   e80cffffff           CALL        rng                                          ; undefined rng()\n.text:0808a1da   8b55fc               MOV         EDX,dword ptr [RBP + local_c+0x8]\n.text:0808a1dd   39d0                 CMP         EAX,EDX\n.text:0808a1df   7550                 JNZ         LAB_0808a231\n.text:0808a1e1   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:0808a1e4   4898                 CDQE\n.text:0808a1e6   488d14c500000000     LEA         RDX,[RAX*0x8]\n.text:0808a1ee   488d05eb2e0000       LEA         RAX,[bets]\n.text:0808a1f5   488b1402             MOV         RDX,qword ptr [RDX + RAX*0x1]\u003d\u003ebets\n.text:0808a1f9   8b4dfc               MOV         ECX,dword ptr [RBP + local_c+0x8]\n.text:0808a1fc   4889d0               MOV         RAX,RDX\n.text:0808a1ff   48c1e003             SHL         RAX,0x3\n.text:0808a203   4801d0               ADD         RAX,RDX\n.text:0808a206   48c1e002             SHL         RAX,0x2\n.text:0808a20a   4889c6               MOV         RSI,RAX\n.text:0808a20d   4863c1               MOVSXD      RAX,ECX\n.text:0808a210   488d14c500000000     LEA         RDX,[RAX*0x8]\n.text:0808a218   488d05c12e0000       LEA         RAX,[bets]\n.text:0808a21f   48893402             MOV         qword ptr [RDX + RAX*0x1]\u003d\u003ebets,RSI\n.text:0808a223   488d3d4f0e0000       LEA         RDI,[s_Congrats!_You_won._0808b079]          ; \u003d \"Congrats! You won.\"\n.text:0808a22a   e8716e37f8           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:0808a22f   eb4d                 JMP         LAB_0808a27e\n                                  LAB_0808a231:\n.text:0808a231   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:0808a234   4898                 CDQE\n.text:0808a236   488d14c500000000     LEA         RDX,[RAX*0x8]\n.text:0808a23e   488d059b2e0000       LEA         RAX,[bets]\n.text:0808a245   488b0402             MOV         RAX\u003d\u003ebets,qword ptr [RDX + RAX*0x1]\n.text:0808a249   8b55fc               MOV         EDX,dword ptr [RBP + local_c+0x8]\n.text:0808a24c   4889c1               MOV         RCX,RAX\n.text:0808a24f   48c1e93f             SHR         RCX,0x3f\n.text:0808a253   4801c8               ADD         RAX,RCX\n.text:0808a256   48d1f8               SAR         RAX,0x1\n.text:0808a259   4889c1               MOV         RCX,RAX\n.text:0808a25c   4863c2               MOVSXD      RAX,EDX\n.text:0808a25f   488d14c500000000     LEA         RDX,[RAX*0x8]\n.text:0808a267   488d05722e0000       LEA         RAX,[bets]\n.text:0808a26e   48890c02             MOV         qword ptr [RDX + RAX*0x1]\u003d\u003ebets,RCX\n.text:0808a272   488d3d170e0000       LEA         RDI,[s_Better_luck_next_time!_You_lost._0808b090]     ; \u003d \"Better luck next time! You lost.\"\n.text:0808a279   e8226e37f8           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n                                  LAB_0808a27e:\n.text:0808a27e   90                   NOP\n.text:0808a27f   c9                   LEAVE\n.text:0808a280   c3                   RET\n",
  "register_tm_clones": "; undefined register_tm_clones()\n; Parameters:\n; Stack variables:\n                                  register_tm_clones:\n.text:0808a070   bea8d00808           MOV         ESI,__TMC_END__\n.text:0808a075   4881eea8d00808       SUB         RSI,__TMC_END__\n.text:0808a07c   4889f0               MOV         RAX,RSI\n.text:0808a07f   48c1ee3f             SHR         RSI,0x3f\n.text:0808a083   48c1f803             SAR         RAX,0x3\n.text:0808a087   4801c6               ADD         RSI,RAX\n.text:0808a08a   48d1fe               SAR         RSI,0x1\n.text:0808a08d   7411                 JZ          LAB_0808a0a0\n.text:0808a08f   b800000000           MOV         EAX,0x0\n.text:0808a094   4885c0               TEST        RAX,RAX\n.text:0808a097   7407                 JZ          LAB_0808a0a0\n.text:0808a099   bfa8d00808           MOV         EDI,__TMC_END__\n.text:0808a09e   ffe0                 JMP         RAX\n                                  LAB_0808a0a0:\n.text:0808a0a0   c3                   RET\n",
  "__libc_csu_init": "; undefined __libc_csu_init()\n; Parameters:\n; Stack variables:\n                                  __libc_csu_init:\n.text:0808a360   f30f1efa             ENDBR64\n.text:0808a364   4157                 PUSH        R15\n.text:0808a366   4c8d3da32a0000       LEA         R15,[__frame_dummy_init_array_entry]         ; \u003d 0808a0e0\n.text:0808a36d   4156                 PUSH        R14\n.text:0808a36f   4989d6               MOV         R14,RDX\n.text:0808a372   4155                 PUSH        R13\n.text:0808a374   4989f5               MOV         R13,RSI\n.text:0808a377   4154                 PUSH        R12\n.text:0808a379   4189fc               MOV         R12D,EDI\n.text:0808a37c   55                   PUSH        RBP\n.text:0808a37d   488d2d942a0000       LEA         RBP,[__do_global_dtors_aux_fini_array_entry]     ; \u003d 0808a0b0\n.text:0808a384   53                   PUSH        RBX\n.text:0808a385   4c29fd               SUB         RBP,R15\n.text:0808a388   4883ec08             SUB         RSP,0x8\n.text:0808a38c   e86f6c37f8           CALL        _init                                        ; int _init(EVP_PKEY_CTX * ctx)\n.text:0808a391   48c1fd03             SAR         RBP,0x3\n.text:0808a395   741f                 JZ          LAB_0808a3b6\n.text:0808a397   31db                 XOR         EBX,EBX\n.text:0808a399   0f1f8000000000       NOP         dword ptr [RAX]\n                                  LAB_0808a3a0:\n.text:0808a3a0   4c89f2               MOV         RDX,R14\n.text:0808a3a3   4c89ee               MOV         RSI,R13\n.text:0808a3a6   4489e7               MOV         EDI,R12D\n.text:0808a3a9   41ff14df             CALL        qword ptr [R15 + RBX*0x8]\u003d\u003e-\u003eframe_dummy     ; undefined __do_global_dtors_aux(), undefined frame_dummy(), \u003d 0808a0e0, \u003d 0808a0b0\n.text:0808a3ad   4883c301             ADD         RBX,0x1\n.text:0808a3b1   4839dd               CMP         RBP,RBX\n.text:0808a3b4   75ea                 JNZ         LAB_0808a3a0\n                                  LAB_0808a3b6:\n.text:0808a3b6   4883c408             ADD         RSP,0x8\n.text:0808a3ba   5b                   POP         RBX\n.text:0808a3bb   5d                   POP         RBP\n.text:0808a3bc   415c                 POP         R12\n.text:0808a3be   415d                 POP         R13\n.text:0808a3c0   415e                 POP         R14\n.text:0808a3c2   415f                 POP         R15\n.text:0808a3c4   c3                   RET\n",
  "_init": "; int __stdcall _init(EVP_PKEY_CTX * ctx)\n; Parameters:\n; ctx            EVP_PKEY_CTX * RDI\n; Stack variables:\n                                  _init:\n.init:00401000   f30f1efa             ENDBR64\n.init:00401004   4883ec08             SUB         RSP,0x8\n.init:00401008   488b05e9bfc807       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::__gmon_start__,qword ptr [-\u003e\u003cEXTERNAL\u003e::__gmon_start__]     ; \u003d ??, \u003d 0808e020\n.init:0040100f   4885c0               TEST        RAX,RAX\n.init:00401012   7402                 JZ          LAB_00401016\n.init:00401014   ffd0                 CALL        RAX\u003d\u003e\u003cEXTERNAL\u003e::__gmon_start__              ; undefined __gmon_start__()\n                                  LAB_00401016:\n.init:00401016   4883c408             ADD         RSP,0x8\n.init:0040101a   c3                   RET\n",
  "_start": "; undefined processEntry _start()\n; Parameters:\n; Stack variables:\n; local_10       undefined8     -0x10\n                                  _start:\n.text:0808a000   f30f1efa             ENDBR64\n.text:0808a004   31ed                 XOR         EBP,EBP\n.text:0808a006   4989d1               MOV         R9,RDX\n.text:0808a009   5e                   POP         RSI\n.text:0808a00a   4889e2               MOV         RDX,RSP\n.text:0808a00d   4883e4f0             AND         RSP,-0x10\n.text:0808a011   50                   PUSH        RAX\n.text:0808a012   54                   PUSH        RSP\u003d\u003elocal_10\n.text:0808a013   49c7c0d0a30808       MOV         R8,__libc_csu_fini\n.text:0808a01a   48c7c160a30808       MOV         RCX,__libc_csu_init\n.text:0808a021   48c7c781a20808       MOV         RDI,main\n.text:0808a028   ff15c22f0000         CALL        qword ptr [-\u003e\u003cEXTERNAL\u003e::__libc_start_main]     ; undefined __libc_start_main(), \u003d 0808e010\n.text:0808a02e   f4                   HLT\n",
  "_dl_relocate_static_pie": "; undefined _dl_relocate_static_pie()\n; Parameters:\n; Stack variables:\n                                  _dl_relocate_static_pie:\n.text:0808a030   f30f1efa             ENDBR64\n.text:0808a034   c3                   RET\n",
  "__gmon_start__": "; undefined __gmon_start__()\n; Parameters:\n; Stack variables:\n                                  __gmon_start__:\nEXTERNAL:0808e020                      ??          ??\n",
  "rng": "; undefined rng()\n; Parameters:\n; Stack variables:\n                                  rng:\n.text:0808a0e6   f30f1efa             ENDBR64\n.text:0808a0ea   55                   PUSH        RBP\n.text:0808a0eb   4889e5               MOV         RBP,RSP\n.text:0808a0ee   bf00000000           MOV         EDI,0x0\n.text:0808a0f3   e8d86f37f8           CALL        \u003cEXTERNAL\u003e::time                             ; time_t time(time_t * __timer)\n.text:0808a0f8   89c7                 MOV         EDI,EAX\n.text:0808a0fa   e8c16f37f8           CALL        \u003cEXTERNAL\u003e::srand                            ; void srand(uint __seed)\n.text:0808a0ff   e8fc6f37f8           CALL        FUN_00401100                                 ; undefined FUN_00401100()\n.text:0808a104   89c1                 MOV         ECX,EAX\n.text:0808a106   4863c1               MOVSXD      RAX,ECX\n.text:0808a109   4869c0a7c867dd       IMUL        RAX,RAX,-0x22983759\n.text:0808a110   48c1e820             SHR         RAX,0x20\n.text:0808a114   01c8                 ADD         EAX,ECX\n.text:0808a116   c1f805               SAR         EAX,0x5\n.text:0808a119   89c2                 MOV         EDX,EAX\n.text:0808a11b   89c8                 MOV         EAX,ECX\n.text:0808a11d   c1f81f               SAR         EAX,0x1f\n.text:0808a120   29c2                 SUB         EDX,EAX\n.text:0808a122   89d0                 MOV         EAX,EDX\n.text:0808a124   c1e003               SHL         EAX,0x3\n.text:0808a127   01d0                 ADD         EAX,EDX\n.text:0808a129   c1e002               SHL         EAX,0x2\n.text:0808a12c   01d0                 ADD         EAX,EDX\n.text:0808a12e   29c1                 SUB         ECX,EAX\n.text:0808a130   89ca                 MOV         EDX,ECX\n.text:0808a132   89d0                 MOV         EAX,EDX\n.text:0808a134   5d                   POP         RBP\n.text:0808a135   c3                   RET\n",
  "main": "; undefined main()\n; Parameters:\n; Stack variables:\n; local_18       undefined1[16] -0x18\n; local_1c       undefined4     -0x1c\n; local_30       undefined8     -0x30\n                                  main:\n.text:0808a281   f30f1efa             ENDBR64\n.text:0808a285   55                   PUSH        RBP\n.text:0808a286   4889e5               MOV         RBP,RSP\n.text:0808a289   4883ec30             SUB         RSP,0x30\n.text:0808a28d   488b052c2e0000       MOV         RAX,qword ptr [stdout]\n.text:0808a294   b900000000           MOV         ECX,0x0\n.text:0808a299   ba02000000           MOV         EDX,0x2\n.text:0808a29e   be00000000           MOV         ESI,0x0\n.text:0808a2a3   4889c7               MOV         RDI,RAX\n.text:0808a2a6   e8356e37f8           CALL        \u003cEXTERNAL\u003e::setvbuf                          ; int setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n.text:0808a2ab   488b051e2e0000       MOV         RAX,qword ptr [stdin]\n.text:0808a2b2   b900000000           MOV         ECX,0x0\n.text:0808a2b7   ba02000000           MOV         EDX,0x2\n.text:0808a2bc   be00000000           MOV         ESI,0x0\n.text:0808a2c1   4889c7               MOV         RDI,RAX\n.text:0808a2c4   e8176e37f8           CALL        \u003cEXTERNAL\u003e::setvbuf                          ; int setvbuf(FILE * __stream, char * __buf, int __modes, size_t __n)\n.text:0808a2c9   488d3de10d0000       LEA         RDI,[s_This_casino_is_very_safe!_0808b0b1]     ; \u003d \"This casino is very safe!\"\n.text:0808a2d0   e8cb6d37f8           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:0808a2d5   488d3df40d0000       LEA         RDI,[s_You_get_to_play_twice,_and_we_ev_0808b0d0]     ; \u003d \"You get to play twice, and we even let you keep half your money if you lose.\"\n.text:0808a2dc   e8bf6d37f8           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:0808a2e1   b800000000           MOV         EAX,0x0\n.text:0808a2e6   e84bfeffff           CALL        play                                         ; undefined play()\n.text:0808a2eb   b800000000           MOV         EAX,0x0\n.text:0808a2f0   e841feffff           CALL        play                                         ; undefined play()\n.text:0808a2f5   d9ee                 FLDZ\n.text:0808a2f7   db7df0               FSTP        tword ptr [RBP + local_18[0]+0x8]\n.text:0808a2fa   c745ec00000000       MOV         dword ptr [RBP + local_1c+0x8],0x0\n.text:0808a301   eb2b                 JMP         LAB_0808a32e\n                                  LAB_0808a303:\n.text:0808a303   8b45ec               MOV         EAX,dword ptr [RBP + local_1c+0x8]\n.text:0808a306   4898                 CDQE\n.text:0808a308   488d14c500000000     LEA         RDX,[RAX*0x8]\n.text:0808a310   488d05c92d0000       LEA         RAX,[bets]\n.text:0808a317   488b0402             MOV         RAX\u003d\u003ebets,qword ptr [RDX + RAX*0x1]\n.text:0808a31b   488945d8             MOV         qword ptr [RBP + local_30+0x8],RAX\n.text:0808a31f   df6dd8               FILD        qword ptr [RBP + local_30+0x8]\n.text:0808a322   db6df0               FLD         tword ptr [RBP + local_18[0]+0x8]\n.text:0808a325   dec1                 FADDP\n.text:0808a327   db7df0               FSTP        tword ptr [RBP + local_18[0]+0x8]\n.text:0808a32a   8345ec01             ADD         dword ptr [RBP + local_1c+0x8],0x1\n                                  LAB_0808a32e:\n.text:0808a32e   8b45ec               MOV         EAX,dword ptr [RBP + local_1c+0x8]\n.text:0808a331   3d1f010000           CMP         EAX,0x11f\n.text:0808a336   76cb                 JBE         LAB_0808a303\n.text:0808a338   ff75f8               PUSH        qword ptr [RBP + local_18[8]+0x8]\n.text:0808a33b   ff75f0               PUSH        qword ptr [RBP + local_18[0]+0x8]\n.text:0808a33e   488d3d3b2d0000       LEA         RDI,[exit_msg]                               ; \u003d \"Your total: $%0.2f. Come back again!\\n\"\n.text:0808a345   b800000000           MOV         EAX,0x0\n.text:0808a34a   e8616d37f8           CALL        \u003cEXTERNAL\u003e::printf                           ; int printf(char * __format, ...)\n.text:0808a34f   4883c410             ADD         RSP,0x10\n.text:0808a353   b800000000           MOV         EAX,0x0\n.text:0808a358   c9                   LEAVE\n.text:0808a359   c3                   RET\n",
  "printf": "; int printf(char * __format, ...)\n; Parameters:\n; __format       char *         RDI\n; Stack variables:\n                                  printf:\n.plt.sec:004010b0 f30f1efa             ENDBR64\n.plt.sec:004010b4 f2ff2565bfc807       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::printf]             ; int printf(char * __format, ...)\n; int printf(char * __format, ...)\n; Parameters:\n; __format       char *         RDI\n; Stack variables:\n                                  ; printf@@GLIBC_2.2.5\n                                  printf:\nEXTERNAL:0808e008                      ??          ??\n",
  "puts": "; int puts(char * __s)\n; Parameters:\n; __s            char *         RDI\n; Stack variables:\n                                  puts:\n.plt.sec:004010a0 f30f1efa             ENDBR64\n.plt.sec:004010a4 f2ff256dbfc807       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::puts]               ; int puts(char * __s)\n; int puts(char * __s)\n; Parameters:\n; __s            char *         RDI\n; Stack variables:\n                                  ; puts@@GLIBC_2.2.5\n                                  puts:\nEXTERNAL:0808e000                      ??          ??\n",
  "deregister_tm_clones": "; undefined deregister_tm_clones()\n; Parameters:\n; Stack variables:\n                                  deregister_tm_clones:\n.text:0808a040   b8a8d00808           MOV         EAX,__TMC_END__\n.text:0808a045   483da8d00808         CMP         RAX,__TMC_END__\n.text:0808a04b   7413                 JZ          LAB_0808a060\n.text:0808a04d   b800000000           MOV         EAX,0x0\n.text:0808a052   4885c0               TEST        RAX,RAX\n.text:0808a055   7409                 JZ          LAB_0808a060\n.text:0808a057   bfa8d00808           MOV         EDI,__TMC_END__\n.text:0808a05c   ffe0                 JMP         RAX\n                                  LAB_0808a060:\n.text:0808a060   c3                   RET\n",
  "rand": "; int rand(void)\n; Parameters:\n; Stack variables:\n                                  ; rand@@GLIBC_2.2.5\n                                  rand:\nEXTERNAL:0808e040                      ??          ??\n",
  "srand": "; void srand(uint __seed)\n; Parameters:\n; __seed         uint           EDI\n; Stack variables:\n                                  srand:\n.plt.sec:004010c0 f30f1efa             ENDBR64\n.plt.sec:004010c4 f2ff255dbfc807       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::srand]              ; void srand(uint __seed)\n; void srand(uint __seed)\n; Parameters:\n; __seed         uint           EDI\n; Stack variables:\n                                  ; srand@@GLIBC_2.2.5\n                                  srand:\nEXTERNAL:0808e018                      ??          ??\n",
  "__libc_csu_fini": "; undefined __libc_csu_fini()\n; Parameters:\n; Stack variables:\n                                  __libc_csu_fini:\n.text:0808a3d0   f30f1efa             ENDBR64\n.text:0808a3d4   c3                   RET\n",
  "__isoc99_scanf": "; undefined __isoc99_scanf()\n; Parameters:\n; Stack variables:\n                                  __isoc99_scanf:\n.plt.sec:004010f0 f30f1efa             ENDBR64\n.plt.sec:004010f4 f2ff2545bfc807       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__isoc99_scanf]     ; undefined __isoc99_scanf()\n; undefined __isoc99_scanf()\n; Parameters:\n; Stack variables:\n                                  ; __isoc99_scanf@@GLIBC_2.7\n                                  __isoc99_scanf:\nEXTERNAL:0808e038                      ??          ??\n",
  "__libc_start_main": "; undefined __libc_start_main()\n; Parameters:\n; Stack variables:\n                                  ; __libc_start_main@@GLIBC_2.2.5\n                                  __libc_start_main:\nEXTERNAL:0808e010                      ??          ??\n",
  "__do_global_dtors_aux": "; undefined __do_global_dtors_aux()\n; Parameters:\n; Stack variables:\n                                  __do_global_dtors_aux:\n.text:0808a0b0   f30f1efa             ENDBR64\n.text:0808a0b4   803d1d30000000       CMP         byte ptr [completed.8061],0x0\n.text:0808a0bb   7513                 JNZ         LAB_0808a0d0\n.text:0808a0bd   55                   PUSH        RBP\n.text:0808a0be   4889e5               MOV         RBP,RSP\n.text:0808a0c1   e87affffff           CALL        deregister_tm_clones                         ; undefined deregister_tm_clones()\n.text:0808a0c6   c6050b30000001       MOV         byte ptr [completed.8061],0x1\n.text:0808a0cd   5d                   POP         RBP\n.text:0808a0ce   c3                   RET\n                                  LAB_0808a0d0:\n.text:0808a0d0   c3                   RET\n",
  "_fini": "; undefined _fini()\n; Parameters:\n; Stack variables:\n                                  _fini:\n.fini:0808a3d8   f30f1efa             ENDBR64\n.fini:0808a3dc   4883ec08             SUB         RSP,0x8\n.fini:0808a3e0   4883c408             ADD         RSP,0x8\n.fini:0808a3e4   c3                   RET\n",
  "FUN_00401020": "; undefined FUN_00401020()\n; Parameters:\n; Stack variables:\n                                  FUN_00401020:\n.plt:00401020    ff35e2bfc807         PUSH        qword ptr [PTR_0808d008]                     ; \u003d 00000000\n.plt:00401026    f2ff25e3bfc807       JMP         qword ptr [PTR_0808d010]\n.plt:00401030    f30f1efa             ENDBR64\n.plt:00401034    6800000000           PUSH        0x0\n.plt:00401039    f2e9e1ffffff         JMP         FUN_00401020                                 ; undefined FUN_00401020()\n.plt:0040103f    90                   NOP\n.plt:00401040    f30f1efa             ENDBR64\n.plt:00401044    6801000000           PUSH        0x1\n.plt:00401049    f2e9d1ffffff         JMP         FUN_00401020                                 ; undefined FUN_00401020()\n.plt:0040104f    90                   NOP\n.plt:00401050    f30f1efa             ENDBR64\n.plt:00401054    6802000000           PUSH        0x2\n.plt:00401059    f2e9c1ffffff         JMP         FUN_00401020                                 ; undefined FUN_00401020()\n.plt:0040105f    90                   NOP\n.plt:00401060    f30f1efa             ENDBR64\n.plt:00401064    6803000000           PUSH        0x3\n.plt:00401069    f2e9b1ffffff         JMP         FUN_00401020                                 ; undefined FUN_00401020()\n.plt:0040106f    90                   NOP\n.plt:00401070    f30f1efa             ENDBR64\n.plt:00401074    6804000000           PUSH        0x4\n.plt:00401079    f2e9a1ffffff         JMP         FUN_00401020                                 ; undefined FUN_00401020()\n.plt:0040107f    90                   NOP\n.plt:00401080    f30f1efa             ENDBR64\n.plt:00401084    6805000000           PUSH        0x5\n.plt:00401089    f2e991ffffff         JMP         FUN_00401020                                 ; undefined FUN_00401020()\n.plt:0040108f    90                   NOP\n.plt:00401090    f30f1efa             ENDBR64\n.plt:00401094    6806000000           PUSH        0x6\n.plt:00401099    f2e981ffffff         JMP         FUN_00401020                                 ; undefined FUN_00401020()\n.plt:0040109f    90                   NOP\n",
  "time": "; time_t time(time_t * __timer)\n; Parameters:\n; __timer        time_t *       RDI\n; Stack variables:\n                                  time:\n.plt.sec:004010d0 f30f1efa             ENDBR64\n.plt.sec:004010d4 f2ff2555bfc807       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::time]               ; time_t time(time_t * __timer)\n; time_t time(time_t * __timer)\n; Parameters:\n; __timer        time_t *       RDI\n; Stack variables:\n                                  ; time@@GLIBC_2.2.5\n                                  time:\nEXTERNAL:0808e028                      ??          ??\n",
  "frame_dummy": "; undefined frame_dummy()\n; Parameters:\n; Stack variables:\n                                  frame_dummy:\n.text:0808a0e0   f30f1efa             ENDBR64\n.text:0808a0e4   eb8a                 JMP         register_tm_clones                           ; undefined register_tm_clones()\n",
  "FUN_00401100": "; undefined FUN_00401100()\n; Parameters:\n; Stack variables:\n                                  FUN_00401100:\n.plt.sec:00401100 f30f1efa             ENDBR64\n.plt.sec:00401104 f2ff253dbfc807       JMP         qword ptr [DAT_0808d048]                     ; int rand(void), -\u003e rand\n"
}