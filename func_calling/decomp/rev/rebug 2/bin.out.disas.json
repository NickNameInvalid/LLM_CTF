{
  "__cxa_finalize": "; undefined __cxa_finalize()\n; Parameters:\n; Stack variables:\n                                  __cxa_finalize:\n.plt.got:00101040 ff259a2f0000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__cxa_finalize]     ; undefined __cxa_finalize()\n; undefined __cxa_finalize()\n; Parameters:\n; Stack variables:\n                                  ; __cxa_finalize@GLIBC_2.2.5\n                                  __cxa_finalize:\nEXTERNAL:00105028                      ??          ??\n",
  "register_tm_clones": "; undefined register_tm_clones()\n; Parameters:\n; Stack variables:\n                                  register_tm_clones:\n.text:001010b0   488d3d612f0000       LEA         RDI,[__TMC_END__]\n.text:001010b7   488d355a2f0000       LEA         RSI,[__TMC_END__]\n.text:001010be   4829fe               SUB         RSI,RDI\n.text:001010c1   4889f0               MOV         RAX,RSI\n.text:001010c4   48c1ee3f             SHR         RSI,0x3f\n.text:001010c8   48c1f803             SAR         RAX,0x3\n.text:001010cc   4801c6               ADD         RSI,RAX\n.text:001010cf   48d1fe               SAR         RSI,0x1\n.text:001010d2   7414                 JZ          LAB_001010e8\n.text:001010d4   488b05fd2e0000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable,qword ptr [-\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable]     ; \u003d ??, \u003d 00105020\n.text:001010db   4885c0               TEST        RAX,RAX\n.text:001010de   7408                 JZ          LAB_001010e8\n.text:001010e0   ffe0                 JMP         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable     ; undefined _ITM_registerTMCloneTable()\n                                  LAB_001010e8:\n.text:001010e8   c3                   RET\n",
  "_init": "; int __stdcall _init(EVP_PKEY_CTX * ctx)\n; Parameters:\n; ctx            EVP_PKEY_CTX * RDI\n; Stack variables:\n                                  _init:\n.init:00101000   4883ec08             SUB         RSP,0x8\n.init:00101004   488b05c52f0000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::__gmon_start__,qword ptr [-\u003e\u003cEXTERNAL\u003e::__gmon_start__]     ; \u003d ??, \u003d 00105018\n.init:0010100b   4885c0               TEST        RAX,RAX\n.init:0010100e   7402                 JZ          LAB_00101012\n.init:00101010   ffd0                 CALL        RAX\u003d\u003e\u003cEXTERNAL\u003e::__gmon_start__              ; undefined __gmon_start__()\n                                  LAB_00101012:\n.init:00101012   4883c408             ADD         RSP,0x8\n.init:00101016   c3                   RET\n",
  "_start": "; undefined processEntry _start()\n; Parameters:\n; Stack variables:\n; local_10       undefined8     -0x10\n                                  _start:\n.text:00101050   31ed                 XOR         EBP,EBP\n.text:00101052   4989d1               MOV         R9,RDX\n.text:00101055   5e                   POP         RSI\n.text:00101056   4889e2               MOV         RDX,RSP\n.text:00101059   4883e4f0             AND         RSP,-0x10\n.text:0010105d   50                   PUSH        RAX\n.text:0010105e   54                   PUSH        RSP\u003d\u003elocal_10\n.text:0010105f   4531c0               XOR         R8D,R8D\n.text:00101062   31c9                 XOR         ECX,ECX\n.text:00101064   488d3d39020000       LEA         RDI,[main]\n.text:0010106b   ff154f2f0000         CALL        qword ptr [-\u003e\u003cEXTERNAL\u003e::__libc_start_main]     ; undefined __libc_start_main(), \u003d 00105000\n.text:00101071   f4                   HLT\n",
  "__gmon_start__": "; undefined __gmon_start__()\n; Parameters:\n; Stack variables:\n                                  __gmon_start__:\nEXTERNAL:00105018                      ??          ??\n",
  "main": "; undefined main()\n; Parameters:\n; Stack variables:\n; local_c        undefined4     -0xc\n; local_10       undefined4     -0x10\n; local_18       undefined4     -0x18\n; local_20       undefined8     -0x20\n; local_28       undefined8     -0x28\n                                  main:\n.text:001012a4   55                   PUSH        RBP\n.text:001012a5   4889e5               MOV         RBP,RSP\n.text:001012a8   4883ec20             SUB         RSP,0x20\n.text:001012ac   48b8426741705962376e     MOV         RAX,0x6e37625970416742\n.text:001012b6   ba43737744           MOV         EDX,0x44777343\n.text:001012bb   488945e0             MOV         qword ptr [RBP + local_28+0x8],RAX\n.text:001012bf   488955e8             MOV         qword ptr [RBP + local_20+0x8],RDX\n.text:001012c3   c745f000000000       MOV         dword ptr [RBP + local_18+0x8],0x0\n.text:001012ca   c745f80c000000       MOV         dword ptr [RBP + local_10+0x8],0xc\n.text:001012d1   488d052c0d0000       LEA         RAX,[s_That_is_incorrect_:(_00102004]        ; \u003d \"That is incorrect :(\"\n.text:001012d8   4889c7               MOV         RDI\u003d\u003es_That_is_incorrect_:(_00102004,RAX     ; \u003d \"That is incorrect :(\"\n.text:001012db   b800000000           MOV         EAX,0x0\n.text:001012e0   e84bfdffff           CALL        \u003cEXTERNAL\u003e::printf                           ; int printf(char * __format, ...)\n.text:001012e5   c745fc00000000       MOV         dword ptr [RBP + local_c+0x8],0x0\n.text:001012ec   eb28                 JMP         LAB_00101316\n                                  LAB_001012ee:\n.text:001012ee   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:001012f1   83e001               AND         EAX,0x1\n.text:001012f4   85c0                 TEST        EAX,EAX\n.text:001012f6   751a                 JNZ         LAB_00101312\n.text:001012f8   837dfc00             CMP         dword ptr [RBP + local_c+0x8],0x0\n.text:001012fc   7414                 JZ          LAB_00101312\n.text:001012fe   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:00101301   4898                 CDQE\n.text:00101303   0fb64405e0           MOVZX       EAX,byte ptr [RBP + RAX*0x1 + -0x20]\n.text:00101308   0fbec0               MOVSX       EAX,AL\n.text:0010130b   89c7                 MOV         EDI,EAX\n.text:0010130d   e81affffff           CALL        printbinchar                                 ; undefined printbinchar()\n                                  LAB_00101312:\n.text:00101312   8345fc01             ADD         dword ptr [RBP + local_c+0x8],0x1\n                                  LAB_00101316:\n.text:00101316   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:00101319   3b45f8               CMP         EAX,dword ptr [RBP + local_10+0x8]\n.text:0010131c   7cd0                 JL          LAB_001012ee\n.text:0010131e   b800000000           MOV         EAX,0x0\n.text:00101323   c9                   LEAVE\n.text:00101324   c3                   RET\n",
  "printf": "; int printf(char * __format, ...)\n; Parameters:\n; __format       char *         RDI\n; Stack variables:\n                                  printf:\n.plt:00101030    ff25ca2f0000         JMP         qword ptr [DAT_00104000]                     ; int printf(char * __format, ...), -\u003e printf\n.plt:00101036    6800000000           PUSH        0x0\n.plt:0010103b    e9e0ffffff           JMP         FUN_00101020                                 ; undefined FUN_00101020()\n; int printf(char * __format, ...)\n; Parameters:\n; __format       char *         RDI\n; Stack variables:\n                                  ; printf@GLIBC_2.2.5\n                                  printf:\nEXTERNAL:00105010                      ??          ??\n",
  "deregister_tm_clones": "; undefined deregister_tm_clones()\n; Parameters:\n; Stack variables:\n                                  deregister_tm_clones:\n.text:00101080   488d3d912f0000       LEA         RDI,[__TMC_END__]\n.text:00101087   488d058a2f0000       LEA         RAX,[__TMC_END__]\n.text:0010108e   4839f8               CMP         RAX,RDI\n.text:00101091   7415                 JZ          LAB_001010a8\n.text:00101093   488b052e2f0000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable,qword ptr [-\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable]     ; \u003d ??, \u003d 00105008\n.text:0010109a   4885c0               TEST        RAX,RAX\n.text:0010109d   7409                 JZ          LAB_001010a8\n.text:0010109f   ffe0                 JMP         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable     ; undefined _ITM_deregisterTMCloneTable()\n                                  LAB_001010a8:\n.text:001010a8   c3                   RET\n",
  "xoring": "; undefined xoring()\n; Parameters:\n; Stack variables:\n; local_c        undefined4     -0xc\n; local_10       undefined4     -0x10\n; local_20       undefined8     -0x20\n; local_28       undefined8     -0x28\n; local_30       undefined8     -0x30\n; local_38       undefined8     -0x38\n; local_40       undefined8     -0x40\n                                  xoring:\n.text:00101139   55                   PUSH        RBP\n.text:0010113a   4889e5               MOV         RBP,RSP\n.text:0010113d   48897dc8             MOV         qword ptr [RBP + local_40+0x8],RDI\n.text:00101141   48c745e000000000     MOV         qword ptr [RBP + local_28+0x8],0x0\n.text:00101149   48c745e800000000     MOV         qword ptr [RBP + local_20+0x8],0x0\n.text:00101151   48c745d000000000     MOV         qword ptr [RBP + local_38+0x8],0x0\n.text:00101159   48c745d800000000     MOV         qword ptr [RBP + local_30+0x8],0x0\n.text:00101161   c745fc00000000       MOV         dword ptr [RBP + local_c+0x8],0x0\n.text:00101168   eb46                 JMP         LAB_001011b0\n                                  LAB_0010116a:\n.text:0010116a   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:0010116d   4898                 CDQE\n.text:0010116f   488d148500000000     LEA         RDX,[RAX*0x4]\n.text:00101177   488b45c8             MOV         RAX,qword ptr [RBP + local_40+0x8]\n.text:0010117b   4801d0               ADD         RAX,RDX\n.text:0010117e   8b10                 MOV         EDX,dword ptr [RAX]\n.text:00101180   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:00101183   4898                 CDQE\n.text:00101185   895485e0             MOV         dword ptr [RBP + RAX*0x4 + -0x20],EDX\n.text:00101189   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:0010118c   4898                 CDQE\n.text:0010118e   4883c004             ADD         RAX,0x4\n.text:00101192   488d148500000000     LEA         RDX,[RAX*0x4]\n.text:0010119a   488b45c8             MOV         RAX,qword ptr [RBP + local_40+0x8]\n.text:0010119e   4801d0               ADD         RAX,RDX\n.text:001011a1   8b10                 MOV         EDX,dword ptr [RAX]\n.text:001011a3   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:001011a6   4898                 CDQE\n.text:001011a8   895485d0             MOV         dword ptr [RBP + RAX*0x4 + -0x30],EDX\n.text:001011ac   8345fc01             ADD         dword ptr [RBP + local_c+0x8],0x1\n                                  LAB_001011b0:\n.text:001011b0   837dfc03             CMP         dword ptr [RBP + local_c+0x8],0x3\n.text:001011b4   7eb4                 JLE         LAB_0010116a\n.text:001011b6   c745f800000000       MOV         dword ptr [RBP + local_10+0x8],0x0\n.text:001011bd   eb60                 JMP         LAB_0010121f\n                                  LAB_001011bf:\n.text:001011bf   8b45f8               MOV         EAX,dword ptr [RBP + local_10+0x8]\n.text:001011c2   4898                 CDQE\n.text:001011c4   8b5485e0             MOV         EDX,dword ptr [RBP + RAX*0x4 + -0x20]\n.text:001011c8   8b45f8               MOV         EAX,dword ptr [RBP + local_10+0x8]\n.text:001011cb   4898                 CDQE\n.text:001011cd   8b4485d0             MOV         EAX,dword ptr [RBP + RAX*0x4 + -0x30]\n.text:001011d1   39c2                 CMP         EDX,EAX\n.text:001011d3   7524                 JNZ         LAB_001011f9\n.text:001011d5   8b05752e0000         MOV         EAX,dword ptr [index_flag]                   ; \u003d ??\n.text:001011db   4898                 CDQE\n.text:001011dd   488d154c2e0000       LEA         RDX,[flag]                                   ; \u003d ??\n.text:001011e4   c6041030             MOV         byte ptr [RAX + RDX*0x1]\u003d\u003eflag,0x30          ; \u003d ??\n.text:001011e8   8b05622e0000         MOV         EAX,dword ptr [index_flag]                   ; \u003d ??\n.text:001011ee   83c001               ADD         EAX,0x1\n.text:001011f1   8905592e0000         MOV         dword ptr [index_flag],EAX                   ; \u003d ??\n.text:001011f7   eb22                 JMP         LAB_0010121b\n                                  LAB_001011f9:\n.text:001011f9   8b05512e0000         MOV         EAX,dword ptr [index_flag]                   ; \u003d ??\n.text:001011ff   4898                 CDQE\n.text:00101201   488d15282e0000       LEA         RDX,[flag]                                   ; \u003d ??\n.text:00101208   c6041031             MOV         byte ptr [RAX + RDX*0x1]\u003d\u003eflag,0x31          ; \u003d ??\n.text:0010120c   8b053e2e0000         MOV         EAX,dword ptr [index_flag]                   ; \u003d ??\n.text:00101212   83c001               ADD         EAX,0x1\n.text:00101215   8905352e0000         MOV         dword ptr [index_flag],EAX                   ; \u003d ??\n                                  LAB_0010121b:\n.text:0010121b   8345f801             ADD         dword ptr [RBP + local_10+0x8],0x1\n                                  LAB_0010121f:\n.text:0010121f   837df803             CMP         dword ptr [RBP + local_10+0x8],0x3\n.text:00101223   7e9a                 JLE         LAB_001011bf\n.text:00101225   b800000000           MOV         EAX,0x0\n.text:0010122a   5d                   POP         RBP\n.text:0010122b   c3                   RET\n",
  "__libc_start_main": "; undefined __libc_start_main()\n; Parameters:\n; Stack variables:\n                                  ; __libc_start_main@GLIBC_2.34\n                                  __libc_start_main:\nEXTERNAL:00105000                      ??          ??\n",
  "__do_global_dtors_aux": "; undefined __do_global_dtors_aux()\n; Parameters:\n; Stack variables:\n                                  __do_global_dtors_aux:\n.text:001010f0   f30f1efa             ENDBR64\n.text:001010f4   803d252f000000       CMP         byte ptr [completed.0],0x0                   ; \u003d ??\n.text:001010fb   752b                 JNZ         LAB_00101128\n.text:001010fd   55                   PUSH        RBP\n.text:001010fe   48833dda2e000000     CMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__cxa_finalize],0x0     ; \u003d 00105028\n.text:00101106   4889e5               MOV         RBP,RSP\n.text:00101109   740c                 JZ          LAB_00101117\n.text:0010110b   488b3dfe2e0000       MOV         RDI,qword ptr [-\u003e__dso_handle]               ; \u003d 00104010\n.text:00101112   e829ffffff           CALL        \u003cEXTERNAL\u003e::__cxa_finalize                   ; undefined __cxa_finalize()\n                                  LAB_00101117:\n.text:00101117   e864ffffff           CALL        deregister_tm_clones                         ; undefined deregister_tm_clones()\n.text:0010111c   c605fd2e000001       MOV         byte ptr [completed.0],0x1                   ; \u003d ??\n.text:00101123   5d                   POP         RBP\n.text:00101124   c3                   RET\n                                  LAB_00101128:\n.text:00101128   c3                   RET\n",
  "_fini": "; undefined _fini()\n; Parameters:\n; Stack variables:\n                                  _fini:\n.fini:00101328   4883ec08             SUB         RSP,0x8\n.fini:0010132c   4883c408             ADD         RSP,0x8\n.fini:00101330   c3                   RET\n",
  "FUN_00101020": "; undefined FUN_00101020()\n; Parameters:\n; Stack variables:\n                                  FUN_00101020:\n.plt:00101020    ff35ca2f0000         PUSH        qword ptr [PTR_00103ff0]                     ; \u003d 00000000\n.plt:00101026    ff25cc2f0000         JMP         qword ptr [PTR_00103ff8]\n",
  "_ITM_deregisterTMCloneTable": "; undefined _ITM_deregisterTMCloneTable()\n; Parameters:\n; Stack variables:\n                                  _ITM_deregisterTMCloneTable:\nEXTERNAL:00105008                      ??          ??\n",
  "printbinchar": "; undefined printbinchar()\n; Parameters:\n; Stack variables:\n; local_c        undefined4     -0xc\n; local_d        undefined1     -0xd\n; local_14       undefined4     -0x14\n; local_20       undefined8     -0x20\n; local_28       undefined8     -0x28\n; local_30       undefined8     -0x30\n; local_38       undefined8     -0x38\n; local_3c       undefined1     -0x3c\n                                  printbinchar:\n.text:0010122c   55                   PUSH        RBP\n.text:0010122d   4889e5               MOV         RBP,RSP\n.text:00101230   4883ec40             SUB         RSP,0x40\n.text:00101234   89f8                 MOV         EAX,EDI\n.text:00101236   8845cc               MOV         byte ptr [RBP + local_3c+0x8],AL\n.text:00101239   48c745d000000000     MOV         qword ptr [RBP + local_38+0x8],0x0\n.text:00101241   48c745d800000000     MOV         qword ptr [RBP + local_30+0x8],0x0\n.text:00101249   48c745e000000000     MOV         qword ptr [RBP + local_28+0x8],0x0\n.text:00101251   48c745e800000000     MOV         qword ptr [RBP + local_20+0x8],0x0\n.text:00101259   0fb645cc             MOVZX       EAX,byte ptr [RBP + local_3c+0x8]\n.text:0010125d   8845fb               MOV         byte ptr [RBP + local_d+0x8],AL\n.text:00101260   c745fc00000000       MOV         dword ptr [RBP + local_c+0x8],0x0\n.text:00101267   eb26                 JMP         LAB_0010128f\n                                  LAB_00101269:\n.text:00101269   0fbe55fb             MOVSX       EDX,byte ptr [RBP + local_d+0x8]\n.text:0010126d   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:00101270   89c1                 MOV         ECX,EAX\n.text:00101272   d3e2                 SHL         EDX,CL\n.text:00101274   89d0                 MOV         EAX,EDX\n.text:00101276   c1f807               SAR         EAX,0x7\n.text:00101279   83e001               AND         EAX,0x1\n.text:0010127c   8945f4               MOV         dword ptr [RBP + local_14+0x8],EAX\n.text:0010127f   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:00101282   4898                 CDQE\n.text:00101284   8b55f4               MOV         EDX,dword ptr [RBP + local_14+0x8]\n.text:00101287   895485d0             MOV         dword ptr [RBP + RAX*0x4 + -0x30],EDX\n.text:0010128b   8345fc01             ADD         dword ptr [RBP + local_c+0x8],0x1\n                                  LAB_0010128f:\n.text:0010128f   837dfc07             CMP         dword ptr [RBP + local_c+0x8],0x7\n.text:00101293   7ed4                 JLE         LAB_00101269\n.text:00101295   488d45d0             LEA         RAX\u003d\u003elocal_38,[RBP + -0x30]\n.text:00101299   4889c7               MOV         RDI,RAX\n.text:0010129c   e898feffff           CALL        xoring                                       ; undefined xoring()\n.text:001012a1   90                   NOP\n.text:001012a2   c9                   LEAVE\n.text:001012a3   c3                   RET\n",
  "frame_dummy": "; undefined frame_dummy()\n; Parameters:\n; Stack variables:\n                                  frame_dummy:\n.text:00101130   f30f1efa             ENDBR64\n.text:00101134   e977ffffff           JMP         register_tm_clones                           ; undefined register_tm_clones()\n",
  "_ITM_registerTMCloneTable": "; undefined _ITM_registerTMCloneTable()\n; Parameters:\n; Stack variables:\n                                  _ITM_registerTMCloneTable:\nEXTERNAL:00105020                      ??          ??\n"
}