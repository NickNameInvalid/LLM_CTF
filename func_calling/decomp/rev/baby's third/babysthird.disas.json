{
  "strcmp": "; int strcmp(char * __s1, char * __s2)\n; Parameters:\n; __s1           char *         RDI\n; __s2           char *         RSI\n; Stack variables:\n                                  strcmp:\n.plt.sec:001010c0 f30f1efa             ENDBR64\n.plt.sec:001010c4 f2ff25fd2e0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::strcmp]             ; int strcmp(char * __s1, char * __s2)\n; int strcmp(char * __s1, char * __s2)\n; Parameters:\n; __s1           char *         RDI\n; __s2           char *         RSI\n; Stack variables:\n                                  ; strcmp@GLIBC_2.2.5\n                                  strcmp:\nEXTERNAL:00105028                      ??          ??\n",
  "__cxa_finalize": "; undefined __cxa_finalize()\n; Parameters:\n; Stack variables:\n                                  ; __cxa_finalize@GLIBC_2.2.5\n                                  __cxa_finalize:\nEXTERNAL:00105048                      ??          ??\n",
  "register_tm_clones": "; undefined register_tm_clones()\n; Parameters:\n; Stack variables:\n                                  register_tm_clones:\n.text:00101140   488d3dc92e0000       LEA         RDI,[completed.0]                            ; \u003d ??\n.text:00101147   488d35c22e0000       LEA         RSI,[completed.0]                            ; \u003d ??\n.text:0010114e   4829fe               SUB         RSI,RDI\n.text:00101151   4889f0               MOV         RAX,RSI\n.text:00101154   48c1ee3f             SHR         RSI,0x3f\n.text:00101158   48c1f803             SAR         RAX,0x3\n.text:0010115c   4801c6               ADD         RSI,RAX\n.text:0010115f   48d1fe               SAR         RSI,0x1\n.text:00101162   7414                 JZ          LAB_00101178\n.text:00101164   488b05852e0000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable,qword ptr [-\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable]     ; \u003d ??, \u003d 00105040\n.text:0010116b   4885c0               TEST        RAX,RAX\n.text:0010116e   7408                 JZ          LAB_00101178\n.text:00101170   ffe0                 JMP         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable     ; undefined _ITM_registerTMCloneTable()\n                                  LAB_00101178:\n.text:00101178   c3                   RET\n",
  "_init": "; int __stdcall _init(EVP_PKEY_CTX * ctx)\n; Parameters:\n; ctx            EVP_PKEY_CTX * RDI\n; Stack variables:\n                                  _init:\n.init:00101000   f30f1efa             ENDBR64\n.init:00101004   4883ec08             SUB         RSP,0x8\n.init:00101008   488b05d92f0000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::__gmon_start__,qword ptr [-\u003e\u003cEXTERNAL\u003e::__gmon_start__]     ; \u003d ??, \u003d 00105030\n.init:0010100f   4885c0               TEST        RAX,RAX\n.init:00101012   7402                 JZ          LAB_00101016\n.init:00101014   ffd0                 CALL        RAX\u003d\u003e\u003cEXTERNAL\u003e::__gmon_start__              ; undefined __gmon_start__()\n                                  LAB_00101016:\n.init:00101016   4883c408             ADD         RSP,0x8\n.init:0010101a   c3                   RET\n",
  "_start": "; undefined processEntry _start()\n; Parameters:\n; Stack variables:\n; local_10       undefined8     -0x10\n                                  _start:\n.text:001010e0   f30f1efa             ENDBR64\n.text:001010e4   31ed                 XOR         EBP,EBP\n.text:001010e6   4989d1               MOV         R9,RDX\n.text:001010e9   5e                   POP         RSI\n.text:001010ea   4889e2               MOV         RDX,RSP\n.text:001010ed   4883e4f0             AND         RSP,-0x10\n.text:001010f1   50                   PUSH        RAX\n.text:001010f2   54                   PUSH        RSP\u003d\u003elocal_10\n.text:001010f3   4531c0               XOR         R8D,R8D\n.text:001010f6   31c9                 XOR         ECX,ECX\n.text:001010f8   488d3dca000000       LEA         RDI,[main]\n.text:001010ff   ff15d32e0000         CALL        qword ptr [-\u003e\u003cEXTERNAL\u003e::__libc_start_main]     ; undefined __libc_start_main(), \u003d 00105000\n.text:00101105   f4                   HLT\n",
  "__gmon_start__": "; undefined __gmon_start__()\n; Parameters:\n; Stack variables:\n                                  __gmon_start__:\nEXTERNAL:00105030                      ??          ??\n",
  "__stack_chk_fail": "; undefined __stack_chk_fail()\n; Parameters:\n; Stack variables:\n                                  __stack_chk_fail:\n.plt.sec:001010a0 f30f1efa             ENDBR64\n.plt.sec:001010a4 f2ff250d2f0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__stack_chk_fail]     ; undefined __stack_chk_fail()\n; undefined __stack_chk_fail()\n; Parameters:\n; Stack variables:\n                                  ; __stack_chk_fail@GLIBC_2.4\n                                  __stack_chk_fail:\nEXTERNAL:00105018                      ??          ??\n",
  "main": "; undefined main()\n; Parameters:\n; Stack variables:\n; local_10       undefined8     -0x10\n; local_78       undefined1     -0x78\n                                  main:\n.text:001011c9   f30f1efa             ENDBR64\n.text:001011cd   55                   PUSH        RBP\n.text:001011ce   4889e5               MOV         RBP,RSP\n.text:001011d1   4883ec70             SUB         RSP,0x70\n.text:001011d5   64488b042528000000     MOV         RAX,qword ptr FS:[0x28]\n.text:001011de   488945f8             MOV         qword ptr [RBP + local_10+0x8],RAX\n.text:001011e2   31c0                 XOR         EAX,EAX\n.text:001011e4   488d051d0e0000       LEA         RAX,[s_Enter_your_password:_00102008]        ; \u003d \"Enter your password: \"\n.text:001011eb   4889c7               MOV         RDI\u003d\u003es_Enter_your_password:_00102008,RAX     ; \u003d \"Enter your password: \"\n.text:001011ee   b800000000           MOV         EAX,0x0\n.text:001011f3   e8b8feffff           CALL        \u003cEXTERNAL\u003e::printf                           ; int printf(char * __format, ...)\n.text:001011f8   488d4590             LEA         RAX\u003d\u003elocal_78,[RBP + -0x70]\n.text:001011fc   4889c6               MOV         RSI,RAX\n.text:001011ff   488d05180e0000       LEA         RAX,[DAT_0010201e]                           ; \u003d 25h    %\n.text:00101206   4889c7               MOV         RDI\u003d\u003eDAT_0010201e,RAX                        ; \u003d 25h    %\n.text:00101209   b800000000           MOV         EAX,0x0\n.text:0010120e   e8bdfeffff           CALL        \u003cEXTERNAL\u003e::__isoc99_scanf                   ; undefined __isoc99_scanf()\n.text:00101213   488d4590             LEA         RAX\u003d\u003elocal_78,[RBP + -0x70]\n.text:00101217   488d150a0e0000       LEA         RDX,[s_csawctf{st1ng_th30ry_a1nt_so_h4r_00102028]     ; \u003d \"csawctf{st1ng_th30ry_a1nt_so_h4rd}\"\n.text:0010121e   4889d6               MOV         RSI\u003d\u003es_csawctf{st1ng_th30ry_a1nt_so_h4r_00102028,RDX     ; \u003d \"csawctf{st1ng_th30ry_a1nt_so_h4rd}\"\n.text:00101221   4889c7               MOV         RDI,RAX\n.text:00101224   e897feffff           CALL        \u003cEXTERNAL\u003e::strcmp                           ; int strcmp(char * __s1, char * __s2)\n.text:00101229   85c0                 TEST        EAX,EAX\n.text:0010122b   7511                 JNZ         LAB_0010123e\n.text:0010122d   488d05170e0000       LEA         RAX,[s_Correct!_0010204b]                    ; \u003d \"Correct!\"\n.text:00101234   4889c7               MOV         RDI\u003d\u003es_Correct!_0010204b,RAX                 ; \u003d \"Correct!\"\n.text:00101237   e854feffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:0010123c   eb0f                 JMP         LAB_0010124d\n                                  LAB_0010123e:\n.text:0010123e   488d050f0e0000       LEA         RAX,[s_Access_denied._00102054]              ; \u003d \"Access denied.\"\n.text:00101245   4889c7               MOV         RDI\u003d\u003es_Access_denied._00102054,RAX           ; \u003d \"Access denied.\"\n.text:00101248   e843feffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n                                  LAB_0010124d:\n.text:0010124d   b800000000           MOV         EAX,0x0\n.text:00101252   488b55f8             MOV         RDX,qword ptr [RBP + local_10+0x8]\n.text:00101256   64482b142528000000     SUB         RDX,qword ptr FS:[0x28]\n.text:0010125f   7405                 JZ          LAB_00101266\n.text:00101261   e83afeffff           CALL        \u003cEXTERNAL\u003e::__stack_chk_fail                 ; undefined __stack_chk_fail()\n                                  LAB_00101266:\n.text:00101266   c9                   LEAVE\n.text:00101267   c3                   RET\n",
  "printf": "; int printf(char * __format, ...)\n; Parameters:\n; __format       char *         RDI\n; Stack variables:\n                                  printf:\n.plt.sec:001010b0 f30f1efa             ENDBR64\n.plt.sec:001010b4 f2ff25052f0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::printf]             ; int printf(char * __format, ...)\n; int printf(char * __format, ...)\n; Parameters:\n; __format       char *         RDI\n; Stack variables:\n                                  ; printf@GLIBC_2.2.5\n                                  printf:\nEXTERNAL:00105020                      ??          ??\n",
  "puts": "; int puts(char * __s)\n; Parameters:\n; __s            char *         RDI\n; Stack variables:\n                                  puts:\n.plt.sec:00101090 f30f1efa             ENDBR64\n.plt.sec:00101094 f2ff25152f0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::puts]               ; int puts(char * __s)\n; int puts(char * __s)\n; Parameters:\n; __s            char *         RDI\n; Stack variables:\n                                  ; puts@GLIBC_2.2.5\n                                  puts:\nEXTERNAL:00105010                      ??          ??\n",
  "deregister_tm_clones": "; undefined deregister_tm_clones()\n; Parameters:\n; Stack variables:\n                                  deregister_tm_clones:\n.text:00101110   488d3df92e0000       LEA         RDI,[completed.0]                            ; \u003d ??\n.text:00101117   488d05f22e0000       LEA         RAX,[completed.0]                            ; \u003d ??\n.text:0010111e   4839f8               CMP         RAX,RDI\n.text:00101121   7415                 JZ          LAB_00101138\n.text:00101123   488b05b62e0000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable,qword ptr [-\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable]     ; \u003d ??, \u003d 00105008\n.text:0010112a   4885c0               TEST        RAX,RAX\n.text:0010112d   7409                 JZ          LAB_00101138\n.text:0010112f   ffe0                 JMP         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable     ; undefined _ITM_deregisterTMCloneTable()\n                                  LAB_00101138:\n.text:00101138   c3                   RET\n",
  "FUN_00101080": "; undefined FUN_00101080()\n; Parameters:\n; Stack variables:\n                                  FUN_00101080:\n.plt.got:00101080 f30f1efa             ENDBR64\n.plt.got:00101084 f2ff256d2f0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__cxa_finalize]     ; undefined __cxa_finalize()\n",
  "__isoc99_scanf": "; undefined __isoc99_scanf()\n; Parameters:\n; Stack variables:\n                                  __isoc99_scanf:\n.plt.sec:001010d0 f30f1efa             ENDBR64\n.plt.sec:001010d4 f2ff25f52e0000       JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__isoc99_scanf]     ; undefined __isoc99_scanf()\n; undefined __isoc99_scanf()\n; Parameters:\n; Stack variables:\n                                  ; __isoc99_scanf@GLIBC_2.7\n                                  __isoc99_scanf:\nEXTERNAL:00105038                      ??          ??\n",
  "__libc_start_main": "; undefined __libc_start_main()\n; Parameters:\n; Stack variables:\n                                  ; __libc_start_main@GLIBC_2.34\n                                  __libc_start_main:\nEXTERNAL:00105000                      ??          ??\n",
  "__do_global_dtors_aux": "; undefined __do_global_dtors_aux()\n; Parameters:\n; Stack variables:\n                                  __do_global_dtors_aux:\n.text:00101180   f30f1efa             ENDBR64\n.text:00101184   803d852e000000       CMP         byte ptr [completed.0],0x0                   ; \u003d ??\n.text:0010118b   752b                 JNZ         LAB_001011b8\n.text:0010118d   55                   PUSH        RBP\n.text:0010118e   48833d622e000000     CMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__cxa_finalize],0x0     ; \u003d 00105048\n.text:00101196   4889e5               MOV         RBP,RSP\n.text:00101199   740c                 JZ          LAB_001011a7\n.text:0010119b   488b3d662e0000       MOV         RDI,qword ptr [-\u003e__dso_handle]               ; \u003d 00104008\n.text:001011a2   e8d9feffff           CALL        FUN_00101080                                 ; undefined FUN_00101080()\n                                  LAB_001011a7:\n.text:001011a7   e864ffffff           CALL        deregister_tm_clones                         ; undefined deregister_tm_clones()\n.text:001011ac   c6055d2e000001       MOV         byte ptr [completed.0],0x1                   ; \u003d ??\n.text:001011b3   5d                   POP         RBP\n.text:001011b4   c3                   RET\n                                  LAB_001011b8:\n.text:001011b8   c3                   RET\n",
  "_fini": "; undefined _fini()\n; Parameters:\n; Stack variables:\n                                  _fini:\n.fini:00101268   f30f1efa             ENDBR64\n.fini:0010126c   4883ec08             SUB         RSP,0x8\n.fini:00101270   4883c408             ADD         RSP,0x8\n.fini:00101274   c3                   RET\n",
  "FUN_00101020": "; undefined FUN_00101020()\n; Parameters:\n; Stack variables:\n                                  FUN_00101020:\n.plt:00101020    ff357a2f0000         PUSH        qword ptr [PTR_00103fa0]                     ; \u003d 00000000\n.plt:00101026    f2ff257b2f0000       JMP         qword ptr [PTR_00103fa8]\n.plt:00101030    f30f1efa             ENDBR64\n.plt:00101034    6800000000           PUSH        0x0\n.plt:00101039    f2e9e1ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:0010103f    90                   NOP\n.plt:00101040    f30f1efa             ENDBR64\n.plt:00101044    6801000000           PUSH        0x1\n.plt:00101049    f2e9d1ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:0010104f    90                   NOP\n.plt:00101050    f30f1efa             ENDBR64\n.plt:00101054    6802000000           PUSH        0x2\n.plt:00101059    f2e9c1ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:0010105f    90                   NOP\n.plt:00101060    f30f1efa             ENDBR64\n.plt:00101064    6803000000           PUSH        0x3\n.plt:00101069    f2e9b1ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:0010106f    90                   NOP\n.plt:00101070    f30f1efa             ENDBR64\n.plt:00101074    6804000000           PUSH        0x4\n.plt:00101079    f2e9a1ffffff         JMP         FUN_00101020                                 ; undefined FUN_00101020()\n.plt:0010107f    90                   NOP\n",
  "_ITM_deregisterTMCloneTable": "; undefined _ITM_deregisterTMCloneTable()\n; Parameters:\n; Stack variables:\n                                  _ITM_deregisterTMCloneTable:\nEXTERNAL:00105008                      ??          ??\n",
  "frame_dummy": "; undefined frame_dummy()\n; Parameters:\n; Stack variables:\n                                  frame_dummy:\n.text:001011c0   f30f1efa             ENDBR64\n.text:001011c4   e977ffffff           JMP         register_tm_clones                           ; undefined register_tm_clones()\n",
  "_ITM_registerTMCloneTable": "; undefined _ITM_registerTMCloneTable()\n; Parameters:\n; Stack variables:\n                                  _ITM_registerTMCloneTable:\nEXTERNAL:00105040                      ??          ??\n"
}