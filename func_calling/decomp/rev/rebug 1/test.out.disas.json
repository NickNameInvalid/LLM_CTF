{
  "__cxa_finalize": "; undefined __cxa_finalize()\n; Parameters:\n; Stack variables:\n                                  __cxa_finalize:\n.plt.got:001010d0 ff25022f0000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__cxa_finalize]     ; undefined __cxa_finalize()\n; undefined __cxa_finalize()\n; Parameters:\n; Stack variables:\n                                  ; __cxa_finalize@GLIBC_2.2.5\n                                  __cxa_finalize:\nEXTERNAL:00105070                      ??          ??\n",
  "register_tm_clones": "; undefined register_tm_clones()\n; Parameters:\n; Stack variables:\n                                  register_tm_clones:\n.text:00101140   488d3d192f0000       LEA         RDI,[completed.0]                            ; \u003d ??\n.text:00101147   488d35122f0000       LEA         RSI,[completed.0]                            ; \u003d ??\n.text:0010114e   4829fe               SUB         RSI,RDI\n.text:00101151   4889f0               MOV         RAX,RSI\n.text:00101154   48c1ee3f             SHR         RSI,0x3f\n.text:00101158   48c1f803             SAR         RAX,0x3\n.text:0010115c   4801c6               ADD         RSI,RAX\n.text:0010115f   48d1fe               SAR         RSI,0x1\n.text:00101162   7414                 JZ          LAB_00101178\n.text:00101164   488b05652e0000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable,qword ptr [-\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable]     ; \u003d ??, \u003d 00105028\n.text:0010116b   4885c0               TEST        RAX,RAX\n.text:0010116e   7408                 JZ          LAB_00101178\n.text:00101170   ffe0                 JMP         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable     ; undefined _ITM_registerTMCloneTable()\n                                  LAB_00101178:\n.text:00101178   c3                   RET\n",
  "_init": "; int __stdcall _init(EVP_PKEY_CTX * ctx)\n; Parameters:\n; ctx            EVP_PKEY_CTX * RDI\n; Stack variables:\n                                  _init:\n.init:00101000   4883ec08             SUB         RSP,0x8\n.init:00101004   488b05b52f0000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::__gmon_start__,qword ptr [-\u003e\u003cEXTERNAL\u003e::__gmon_start__]     ; \u003d ??, \u003d 00105008\n.init:0010100b   4885c0               TEST        RAX,RAX\n.init:0010100e   7402                 JZ          LAB_00101012\n.init:00101010   ffd0                 CALL        RAX\u003d\u003e\u003cEXTERNAL\u003e::__gmon_start__              ; undefined __gmon_start__()\n                                  LAB_00101012:\n.init:00101012   4883c408             ADD         RSP,0x8\n.init:00101016   c3                   RET\n",
  "_start": "; undefined processEntry _start()\n; Parameters:\n; Stack variables:\n; local_10       undefined8     -0x10\n                                  _start:\n.text:001010e0   31ed                 XOR         EBP,EBP\n.text:001010e2   4989d1               MOV         R9,RDX\n.text:001010e5   5e                   POP         RSI\n.text:001010e6   4889e2               MOV         RDX,RSP\n.text:001010e9   4883e4f0             AND         RSP,-0x10\n.text:001010ed   50                   PUSH        RAX\n.text:001010ee   54                   PUSH        RSP\u003d\u003elocal_10\n.text:001010ef   4531c0               XOR         R8D,R8D\n.text:001010f2   31c9                 XOR         ECX,ECX\n.text:001010f4   488d3dce000000       LEA         RDI,[main]\n.text:001010fb   ff15df2e0000         CALL        qword ptr [-\u003e\u003cEXTERNAL\u003e::__libc_start_main]     ; undefined __libc_start_main(), \u003d 00105060\n.text:00101101   f4                   HLT\n",
  "EVP_MD_CTX_free": "; undefined EVP_MD_CTX_free()\n; Parameters:\n; Stack variables:\n                                  EVP_MD_CTX_free:\n.plt:00101090    ff259a2f0000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::EVP_MD_CTX_free]     ; undefined EVP_MD_CTX_free()\n.plt:00101096    6806000000           PUSH        0x6\n.plt:0010109b    e980ffffff           JMP         FUN_00101020                                 ; undefined FUN_00101020()\n; undefined EVP_MD_CTX_free()\n; Parameters:\n; Stack variables:\n                                  ; EVP_MD_CTX_free@OPENSSL_3.0.0\n                                  EVP_MD_CTX_free:\nEXTERNAL:00105048                      ??          ??\n",
  "__gmon_start__": "; undefined __gmon_start__()\n; Parameters:\n; Stack variables:\n                                  __gmon_start__:\nEXTERNAL:00105008                      ??          ??\n",
  "main": "; undefined main()\n; Parameters:\n; Stack variables:\n; local_c        undefined4     -0xc\n; local_10       undefined4     -0x10\n; local_18       undefined8     -0x18\n; local_408      undefined1     -0x408\n; local_418      undefined1     -0x418\n; local_41c      undefined4     -0x41c\n; local_448      undefined1     -0x448\n                                  main:\n.text:001011c9   55                   PUSH        RBP\n.text:001011ca   4889e5               MOV         RBP,RSP\n.text:001011cd   4881ec40040000       SUB         RSP,0x440\n.text:001011d4   488d05290e0000       LEA         RAX,[s_Enter_the_String:_00102004]           ; \u003d \"Enter the String: \"\n.text:001011db   4889c7               MOV         RDI\u003d\u003es_Enter_the_String:_00102004,RAX        ; \u003d \"Enter the String: \"\n.text:001011de   b800000000           MOV         EAX,0x0\n.text:001011e3   e848feffff           CALL        \u003cEXTERNAL\u003e::printf                           ; int printf(char * __format, ...)\n.text:001011e8   488d8500fcffff       LEA         RAX\u003d\u003elocal_408,[RBP + -0x400]\n.text:001011ef   4889c6               MOV         RSI,RAX\n.text:001011f2   488d051e0e0000       LEA         RAX,[DAT_00102017]                           ; \u003d 25h    %\n.text:001011f9   4889c7               MOV         RDI\u003d\u003eDAT_00102017,RAX                        ; \u003d 25h    %\n.text:001011fc   b800000000           MOV         EAX,0x0\n.text:00101201   e89afeffff           CALL        \u003cEXTERNAL\u003e::__isoc99_scanf                   ; undefined __isoc99_scanf()\n.text:00101206   c745fc00000000       MOV         dword ptr [RBP + local_c+0x8],0x0\n.text:0010120d   eb04                 JMP         LAB_00101213\n                                  LAB_0010120f:\n.text:0010120f   8345fc01             ADD         dword ptr [RBP + local_c+0x8],0x1\n                                  LAB_00101213:\n.text:00101213   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:00101216   4898                 CDQE\n.text:00101218   0fb6840500fcffff     MOVZX       EAX,byte ptr [RBP + RAX*0x1 + -0x400]\n.text:00101220   84c0                 TEST        AL,AL\n.text:00101222   75eb                 JNZ         LAB_0010120f\n.text:00101224   837dfc0c             CMP         dword ptr [RBP + local_c+0x8],0xc\n.text:00101228   0f85f0000000         JNZ         LAB_0010131e\n.text:0010122e   488d05e50d0000       LEA         RAX,[s_that\u0027s_correct!_0010201a]             ; \u003d \"that\u0027s correct!\"\n.text:00101235   4889c7               MOV         RDI\u003d\u003es_that\u0027s_correct!_0010201a,RAX          ; \u003d \"that\u0027s correct!\"\n.text:00101238   e803feffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:0010123d   e80efeffff           CALL        \u003cEXTERNAL\u003e::EVP_MD_CTX_new                   ; undefined EVP_MD_CTX_new()\n.text:00101242   488945f0             MOV         qword ptr [RBP + local_18+0x8],RAX\n.text:00101246   e835feffff           CALL        \u003cEXTERNAL\u003e::EVP_md5                          ; EVP_MD * EVP_md5(void)\n.text:0010124b   4889c1               MOV         RCX,RAX\n.text:0010124e   488b45f0             MOV         RAX,qword ptr [RBP + local_18+0x8]\n.text:00101252   ba00000000           MOV         EDX,0x0\n.text:00101257   4889ce               MOV         RSI,RCX\n.text:0010125a   4889c7               MOV         RDI,RAX\n.text:0010125d   e84efeffff           CALL        \u003cEXTERNAL\u003e::EVP_DigestInit_ex                ; int EVP_DigestInit_ex(EVP_MD_CTX * ctx, EVP_MD * type, ENGINE * impl)\n.text:00101262   488b45f0             MOV         RAX,qword ptr [RBP + local_18+0x8]\n.text:00101266   ba02000000           MOV         EDX,0x2\n.text:0010126b   488d0db80d0000       LEA         RCX,[DAT_0010202a]                           ; \u003d 31h    1\n.text:00101272   4889ce               MOV         RSI\u003d\u003eDAT_0010202a,RCX                        ; \u003d 31h    1\n.text:00101275   4889c7               MOV         RDI,RAX\n.text:00101278   e8f3fdffff           CALL        \u003cEXTERNAL\u003e::EVP_DigestUpdate                 ; int EVP_DigestUpdate(EVP_MD_CTX * ctx, void * d, size_t cnt)\n.text:0010127d   c785ecfbffff10000000     MOV         dword ptr [RBP + local_41c+0x8],0x10\n.text:00101287   488d95ecfbffff       LEA         RDX\u003d\u003elocal_41c,[RBP + -0x414]\n.text:0010128e   488d8df0fbffff       LEA         RCX\u003d\u003elocal_418,[RBP + -0x410]\n.text:00101295   488b45f0             MOV         RAX,qword ptr [RBP + local_18+0x8]\n.text:00101299   4889ce               MOV         RSI,RCX\n.text:0010129c   4889c7               MOV         RDI,RAX\n.text:0010129f   e81cfeffff           CALL        \u003cEXTERNAL\u003e::EVP_DigestFinal_ex               ; int EVP_DigestFinal_ex(EVP_MD_CTX * ctx, uchar * md, uint * s)\n.text:001012a4   488b45f0             MOV         RAX,qword ptr [RBP + local_18+0x8]\n.text:001012a8   4889c7               MOV         RDI,RAX\n.text:001012ab   e8e0fdffff           CALL        \u003cEXTERNAL\u003e::EVP_MD_CTX_free                  ; undefined EVP_MD_CTX_free()\n.text:001012b0   c745f800000000       MOV         dword ptr [RBP + local_10+0x8],0x0\n.text:001012b7   eb3f                 JMP         LAB_001012f8\n                                  LAB_001012b9:\n.text:001012b9   8b45f8               MOV         EAX,dword ptr [RBP + local_10+0x8]\n.text:001012bc   4898                 CDQE\n.text:001012be   0fb68405f0fbffff     MOVZX       EAX,byte ptr [RBP + RAX*0x1 + -0x410]\n.text:001012c6   0fb6c0               MOVZX       EAX,AL\n.text:001012c9   8b55f8               MOV         EDX,dword ptr [RBP + local_10+0x8]\n.text:001012cc   01d2                 ADD         EDX,EDX\n.text:001012ce   488d8dc0fbffff       LEA         RCX\u003d\u003elocal_448,[RBP + -0x440]\n.text:001012d5   4863d2               MOVSXD      RDX,EDX\n.text:001012d8   4801d1               ADD         RCX,RDX\n.text:001012db   89c2                 MOV         EDX,EAX\n.text:001012dd   488d05490d0000       LEA         RAX,[DAT_0010202d]                           ; \u003d 25h    %\n.text:001012e4   4889c6               MOV         RSI\u003d\u003eDAT_0010202d,RAX                        ; \u003d 25h    %\n.text:001012e7   4889cf               MOV         RDI,RCX\n.text:001012ea   b800000000           MOV         EAX,0x0\n.text:001012ef   e86cfdffff           CALL        \u003cEXTERNAL\u003e::sprintf                          ; int sprintf(char * __s, char * __format, ...)\n.text:001012f4   8345f801             ADD         dword ptr [RBP + local_10+0x8],0x1\n                                  LAB_001012f8:\n.text:001012f8   837df80f             CMP         dword ptr [RBP + local_10+0x8],0xf\n.text:001012fc   7ebb                 JLE         LAB_001012b9\n.text:001012fe   488d85c0fbffff       LEA         RAX\u003d\u003elocal_448,[RBP + -0x440]\n.text:00101305   4889c6               MOV         RSI,RAX\n.text:00101308   488d05230d0000       LEA         RAX,[s_csawctf{%s}_00102032]                 ; \u003d \"csawctf{%s}\\n\"\n.text:0010130f   4889c7               MOV         RDI\u003d\u003es_csawctf{%s}_00102032,RAX              ; \u003d \"csawctf{%s}\\n\"\n.text:00101312   b800000000           MOV         EAX,0x0\n.text:00101317   e814fdffff           CALL        \u003cEXTERNAL\u003e::printf                           ; int printf(char * __format, ...)\n.text:0010131c   eb14                 JMP         LAB_00101332\n                                  LAB_0010131e:\n.text:0010131e   488d051a0d0000       LEA         RAX,[s_that_isn\u0027t_correct,_im_sorry!_0010203f]     ; \u003d \"that isn\u0027t correct, im sorry!\"\n.text:00101325   4889c7               MOV         RDI\u003d\u003es_that_isn\u0027t_correct,_im_sorry!_0010203f,RAX     ; \u003d \"that isn\u0027t correct, im sorry!\"\n.text:00101328   b800000000           MOV         EAX,0x0\n.text:0010132d   e8fefcffff           CALL        \u003cEXTERNAL\u003e::printf                           ; int printf(char * __format, ...)\n                                  LAB_00101332:\n.text:00101332   b800000000           MOV         EAX,0x0\n.text:00101337   c9                   LEAVE\n.text:00101338   c3                   RET\n",
  "EVP_DigestInit_ex": "; int EVP_DigestInit_ex(EVP_MD_CTX * ctx, EVP_MD * type, ENGINE * impl)\n; Parameters:\n; ctx            EVP_MD_CTX *   RDI\n; type           EVP_MD *       RSI\n; impl           ENGINE *       RDX\n; Stack variables:\n                                  EVP_DigestInit_ex:\n.plt:001010b0    ff258a2f0000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::EVP_DigestInit_ex]     ; int EVP_DigestInit_ex(EVP_MD_CTX * ctx, EVP_MD * type, ENGINE * impl)\n.plt:001010b6    6808000000           PUSH        0x8\n.plt:001010bb    e960ffffff           JMP         FUN_00101020                                 ; undefined FUN_00101020()\n; int EVP_DigestInit_ex(EVP_MD_CTX * ctx, EVP_MD * type, ENGINE * impl)\n; Parameters:\n; ctx            EVP_MD_CTX *   RDI\n; type           EVP_MD *       RSI\n; impl           ENGINE *       RDX\n; Stack variables:\n                                  ; EVP_DigestInit_ex@OPENSSL_3.0.0\n                                  EVP_DigestInit_ex:\nEXTERNAL:00105058                      ??          ??\n",
  "printf": "; int printf(char * __format, ...)\n; Parameters:\n; __format       char *         RDI\n; Stack variables:\n                                  printf:\n.plt:00101030    ff25ca2f0000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::printf]             ; int printf(char * __format, ...)\n.plt:00101036    6800000000           PUSH        0x0\n.plt:0010103b    e9e0ffffff           JMP         FUN_00101020                                 ; undefined FUN_00101020()\n; int printf(char * __format, ...)\n; Parameters:\n; __format       char *         RDI\n; Stack variables:\n                                  ; printf@GLIBC_2.2.5\n                                  printf:\nEXTERNAL:00105000                      ??          ??\n",
  "sprintf": "; int sprintf(char * __s, char * __format, ...)\n; Parameters:\n; __s            char *         RDI\n; __format       char *         RSI\n; Stack variables:\n                                  sprintf:\n.plt:00101060    ff25b22f0000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::sprintf]            ; int sprintf(char * __s, char * __format, ...)\n.plt:00101066    6803000000           PUSH        0x3\n.plt:0010106b    e9b0ffffff           JMP         FUN_00101020                                 ; undefined FUN_00101020()\n; int sprintf(char * __s, char * __format, ...)\n; Parameters:\n; __s            char *         RDI\n; __format       char *         RSI\n; Stack variables:\n                                  ; sprintf@GLIBC_2.2.5\n                                  sprintf:\nEXTERNAL:00105030                      ??          ??\n",
  "puts": "; int puts(char * __s)\n; Parameters:\n; __s            char *         RDI\n; Stack variables:\n                                  puts:\n.plt:00101040    ff25c22f0000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::puts]               ; int puts(char * __s)\n.plt:00101046    6801000000           PUSH        0x1\n.plt:0010104b    e9d0ffffff           JMP         FUN_00101020                                 ; undefined FUN_00101020()\n; int puts(char * __s)\n; Parameters:\n; __s            char *         RDI\n; Stack variables:\n                                  ; puts@GLIBC_2.2.5\n                                  puts:\nEXTERNAL:00105010                      ??          ??\n",
  "EVP_DigestUpdate": "; int EVP_DigestUpdate(EVP_MD_CTX * ctx, void * d, size_t cnt)\n; Parameters:\n; ctx            EVP_MD_CTX *   RDI\n; d              void *         RSI\n; cnt            size_t         RDX\n; Stack variables:\n                                  EVP_DigestUpdate:\n.plt:00101070    ff25aa2f0000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::EVP_DigestUpdate]     ; int EVP_DigestUpdate(EVP_MD_CTX * ctx, void * d, size_t cnt)\n.plt:00101076    6804000000           PUSH        0x4\n.plt:0010107b    e9a0ffffff           JMP         FUN_00101020                                 ; undefined FUN_00101020()\n; int EVP_DigestUpdate(EVP_MD_CTX * ctx, void * d, size_t cnt)\n; Parameters:\n; ctx            EVP_MD_CTX *   RDI\n; d              void *         RSI\n; cnt            size_t         RDX\n; Stack variables:\n                                  ; EVP_DigestUpdate@OPENSSL_3.0.0\n                                  EVP_DigestUpdate:\nEXTERNAL:00105038                      ??          ??\n",
  "deregister_tm_clones": "; undefined deregister_tm_clones()\n; Parameters:\n; Stack variables:\n                                  deregister_tm_clones:\n.text:00101110   488d3d492f0000       LEA         RDI,[completed.0]                            ; \u003d ??\n.text:00101117   488d05422f0000       LEA         RAX,[completed.0]                            ; \u003d ??\n.text:0010111e   4839f8               CMP         RAX,RDI\n.text:00101121   7415                 JZ          LAB_00101138\n.text:00101123   488b059e2e0000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable,qword ptr [-\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable]     ; \u003d ??, \u003d 00105018\n.text:0010112a   4885c0               TEST        RAX,RAX\n.text:0010112d   7409                 JZ          LAB_00101138\n.text:0010112f   ffe0                 JMP         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable     ; undefined _ITM_deregisterTMCloneTable()\n                                  LAB_00101138:\n.text:00101138   c3                   RET\n",
  "__isoc99_scanf": "; undefined __isoc99_scanf()\n; Parameters:\n; Stack variables:\n                                  __isoc99_scanf:\n.plt:001010a0    ff25922f0000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__isoc99_scanf]     ; undefined __isoc99_scanf()\n.plt:001010a6    6807000000           PUSH        0x7\n.plt:001010ab    e970ffffff           JMP         FUN_00101020                                 ; undefined FUN_00101020()\n; undefined __isoc99_scanf()\n; Parameters:\n; Stack variables:\n                                  ; __isoc99_scanf@GLIBC_2.7\n                                  __isoc99_scanf:\nEXTERNAL:00105050                      ??          ??\n",
  "__libc_start_main": "; undefined __libc_start_main()\n; Parameters:\n; Stack variables:\n                                  ; __libc_start_main@GLIBC_2.34\n                                  __libc_start_main:\nEXTERNAL:00105060                      ??          ??\n",
  "__do_global_dtors_aux": "; undefined __do_global_dtors_aux()\n; Parameters:\n; Stack variables:\n                                  __do_global_dtors_aux:\n.text:00101180   f30f1efa             ENDBR64\n.text:00101184   803dd52e000000       CMP         byte ptr [completed.0],0x0                   ; \u003d ??\n.text:0010118b   752b                 JNZ         LAB_001011b8\n.text:0010118d   55                   PUSH        RBP\n.text:0010118e   48833d422e000000     CMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__cxa_finalize],0x0     ; \u003d 00105070\n.text:00101196   4889e5               MOV         RBP,RSP\n.text:00101199   740c                 JZ          LAB_001011a7\n.text:0010119b   488b3db62e0000       MOV         RDI,qword ptr [-\u003e__dso_handle]               ; \u003d 00104058\n.text:001011a2   e829ffffff           CALL        \u003cEXTERNAL\u003e::__cxa_finalize                   ; undefined __cxa_finalize()\n                                  LAB_001011a7:\n.text:001011a7   e864ffffff           CALL        deregister_tm_clones                         ; undefined deregister_tm_clones()\n.text:001011ac   c605ad2e000001       MOV         byte ptr [completed.0],0x1                   ; \u003d ??\n.text:001011b3   5d                   POP         RBP\n.text:001011b4   c3                   RET\n                                  LAB_001011b8:\n.text:001011b8   c3                   RET\n",
  "_fini": "; undefined _fini()\n; Parameters:\n; Stack variables:\n                                  _fini:\n.fini:0010133c   4883ec08             SUB         RSP,0x8\n.fini:00101340   4883c408             ADD         RSP,0x8\n.fini:00101344   c3                   RET\n",
  "FUN_00101020": "; undefined FUN_00101020()\n; Parameters:\n; Stack variables:\n                                  FUN_00101020:\n.plt:00101020    ff35ca2f0000         PUSH        qword ptr [PTR_00103ff0]                     ; \u003d 00000000\n.plt:00101026    ff25cc2f0000         JMP         qword ptr [PTR_00103ff8]\n",
  "_ITM_deregisterTMCloneTable": "; undefined _ITM_deregisterTMCloneTable()\n; Parameters:\n; Stack variables:\n                                  _ITM_deregisterTMCloneTable:\nEXTERNAL:00105018                      ??          ??\n",
  "EVP_md5": "; EVP_MD * EVP_md5(void)\n; Parameters:\n; Stack variables:\n                                  EVP_md5:\n.plt:00101080    ff25a22f0000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::EVP_md5]            ; EVP_MD * EVP_md5(void)\n.plt:00101086    6805000000           PUSH        0x5\n.plt:0010108b    e990ffffff           JMP         FUN_00101020                                 ; undefined FUN_00101020()\n; EVP_MD * EVP_md5(void)\n; Parameters:\n; Stack variables:\n                                  ; EVP_md5@OPENSSL_3.0.0\n                                  EVP_md5:\nEXTERNAL:00105040                      ??          ??\n",
  "frame_dummy": "; undefined frame_dummy()\n; Parameters:\n; Stack variables:\n                                  frame_dummy:\n.text:001011c0   f30f1efa             ENDBR64\n.text:001011c4   e977ffffff           JMP         register_tm_clones                           ; undefined register_tm_clones()\n",
  "EVP_DigestFinal_ex": "; int EVP_DigestFinal_ex(EVP_MD_CTX * ctx, uchar * md, uint * s)\n; Parameters:\n; ctx            EVP_MD_CTX *   RDI\n; md             uchar *        RSI\n; s              uint *         RDX\n; Stack variables:\n                                  EVP_DigestFinal_ex:\n.plt:001010c0    ff25822f0000         JMP         qword ptr [DAT_00104048]                     ; int EVP_DigestFinal_ex(EVP_MD_CTX * ctx, uchar * md, uint * s), -\u003e EVP_DigestFinal_ex\n.plt:001010c6    6809000000           PUSH        0x9\n.plt:001010cb    e950ffffff           JMP         FUN_00101020                                 ; undefined FUN_00101020()\n; int EVP_DigestFinal_ex(EVP_MD_CTX * ctx, uchar * md, uint * s)\n; Parameters:\n; ctx            EVP_MD_CTX *   RDI\n; md             uchar *        RSI\n; s              uint *         RDX\n; Stack variables:\n                                  ; EVP_DigestFinal_ex@OPENSSL_3.0.0\n                                  EVP_DigestFinal_ex:\nEXTERNAL:00105068                      ??          ??\n",
  "_ITM_registerTMCloneTable": "; undefined _ITM_registerTMCloneTable()\n; Parameters:\n; Stack variables:\n                                  _ITM_registerTMCloneTable:\nEXTERNAL:00105028                      ??          ??\n",
  "EVP_MD_CTX_new": "; undefined EVP_MD_CTX_new()\n; Parameters:\n; Stack variables:\n                                  EVP_MD_CTX_new:\n.plt:00101050    ff25ba2f0000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::EVP_MD_CTX_new]     ; undefined EVP_MD_CTX_new()\n.plt:00101056    6802000000           PUSH        0x2\n.plt:0010105b    e9c0ffffff           JMP         FUN_00101020                                 ; undefined FUN_00101020()\n; undefined EVP_MD_CTX_new()\n; Parameters:\n; Stack variables:\n                                  ; EVP_MD_CTX_new@OPENSSL_3.0.0\n                                  EVP_MD_CTX_new:\nEXTERNAL:00105020                      ??          ??\n"
}