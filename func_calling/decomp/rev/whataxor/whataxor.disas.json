{
  "strcmp": "; int strcmp(char * __s1, char * __s2)\n; Parameters:\n; __s1           char *         RDI\n; __s2           char *         RSI\n; Stack variables:\n                                  strcmp:\n.plt:00100670    ff2552092000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::strcmp]             ; int strcmp(char * __s1, char * __s2)\n.plt:00100676    6803000000           PUSH        0x3\n.plt:0010067b    e9b0ffffff           JMP         FUN_00100630                                 ; undefined FUN_00100630()\n; int strcmp(char * __s1, char * __s2)\n; Parameters:\n; __s1           char *         RDI\n; __s2           char *         RSI\n; Stack variables:\n                                  ; strcmp@@GLIBC_2.2.5\n                                  strcmp:\nEXTERNAL:00302028                      ??          ??\n",
  "__cxa_finalize": "; undefined __cxa_finalize()\n; Parameters:\n; Stack variables:\n                                  __cxa_finalize:\n.plt.got:00100690 ff2562092000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__cxa_finalize]     ; undefined __cxa_finalize()\n; undefined __cxa_finalize()\n; Parameters:\n; Stack variables:\n                                  ; __cxa_finalize@@GLIBC_2.2.5\n                                  __cxa_finalize:\nEXTERNAL:00302048                      ??          ??\n",
  "xor_transform": "; undefined xor_transform()\n; Parameters:\n; Stack variables:\n; local_c        undefined4     -0xc\n; local_20       undefined8     -0x20\n; local_24       undefined1     -0x24\n                                  xor_transform:\n.text:001007aa   55                   PUSH        RBP\n.text:001007ab   4889e5               MOV         RBP,RSP\n.text:001007ae   48897de8             MOV         qword ptr [RBP + local_20+0x8],RDI\n.text:001007b2   89f0                 MOV         EAX,ESI\n.text:001007b4   8845e4               MOV         byte ptr [RBP + local_24+0x8],AL\n.text:001007b7   c745fc00000000       MOV         dword ptr [RBP + local_c+0x8],0x0\n.text:001007be   eb26                 JMP         LAB_001007e6\n                                  LAB_001007c0:\n.text:001007c0   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:001007c3   4863d0               MOVSXD      RDX,EAX\n.text:001007c6   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:001007ca   4801d0               ADD         RAX,RDX\n.text:001007cd   0fb600               MOVZX       EAX,byte ptr [RAX]\n.text:001007d0   8b55fc               MOV         EDX,dword ptr [RBP + local_c+0x8]\n.text:001007d3   4863ca               MOVSXD      RCX,EDX\n.text:001007d6   488b55e8             MOV         RDX,qword ptr [RBP + local_20+0x8]\n.text:001007da   4801ca               ADD         RDX,RCX\n.text:001007dd   3245e4               XOR         AL,byte ptr [RBP + local_24+0x8]\n.text:001007e0   8802                 MOV         byte ptr [RDX],AL\n.text:001007e2   8345fc01             ADD         dword ptr [RBP + local_c+0x8],0x1\n                                  LAB_001007e6:\n.text:001007e6   8b45fc               MOV         EAX,dword ptr [RBP + local_c+0x8]\n.text:001007e9   4863d0               MOVSXD      RDX,EAX\n.text:001007ec   488b45e8             MOV         RAX,qword ptr [RBP + local_20+0x8]\n.text:001007f0   4801d0               ADD         RAX,RDX\n.text:001007f3   0fb600               MOVZX       EAX,byte ptr [RAX]\n.text:001007f6   84c0                 TEST        AL,AL\n.text:001007f8   75c6                 JNZ         LAB_001007c0\n.text:001007fa   90                   NOP\n.text:001007fb   5d                   POP         RBP\n.text:001007fc   c3                   RET\n",
  "register_tm_clones": "; undefined register_tm_clones()\n; Parameters:\n; Stack variables:\n                                  register_tm_clones:\n.text:00100710   488d3df9082000       LEA         RDI,[completed.7698]                         ; \u003d ??\n.text:00100717   488d35f2082000       LEA         RSI,[completed.7698]                         ; \u003d ??\n.text:0010071e   55                   PUSH        RBP\n.text:0010071f   4829fe               SUB         RSI,RDI\n.text:00100722   4889e5               MOV         RBP,RSP\n.text:00100725   48c1fe03             SAR         RSI,0x3\n.text:00100729   4889f0               MOV         RAX,RSI\n.text:0010072c   48c1e83f             SHR         RAX,0x3f\n.text:00100730   4801c6               ADD         RSI,RAX\n.text:00100733   48d1fe               SAR         RSI,0x1\n.text:00100736   7418                 JZ          LAB_00100750\n.text:00100738   488b05b1082000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable,qword ptr [-\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable]     ; \u003d ??, \u003d 00302040\n.text:0010073f   4885c0               TEST        RAX,RAX\n.text:00100742   740c                 JZ          LAB_00100750\n.text:00100744   5d                   POP         RBP\n.text:00100745   ffe0                 JMP         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_registerTMCloneTable     ; undefined _ITM_registerTMCloneTable()\n                                  LAB_00100750:\n.text:00100750   5d                   POP         RBP\n.text:00100751   c3                   RET\n",
  "__libc_csu_init": "; undefined __libc_csu_init()\n; Parameters:\n; Stack variables:\n                                  __libc_csu_init:\n.text:00100a80   4157                 PUSH        R15\n.text:00100a82   4156                 PUSH        R14\n.text:00100a84   4989d7               MOV         R15,RDX\n.text:00100a87   4155                 PUSH        R13\n.text:00100a89   4154                 PUSH        R12\n.text:00100a8b   4c8d2506032000       LEA         R12,[__frame_dummy_init_array_entry]         ; \u003d 001007a0\n.text:00100a92   55                   PUSH        RBP\n.text:00100a93   488d2d06032000       LEA         RBP,[__do_global_dtors_aux_fini_array_entry]     ; \u003d 00100760\n.text:00100a9a   53                   PUSH        RBX\n.text:00100a9b   4189fd               MOV         R13D,EDI\n.text:00100a9e   4989f6               MOV         R14,RSI\n.text:00100aa1   4c29e5               SUB         RBP,R12\n.text:00100aa4   4883ec08             SUB         RSP,0x8\n.text:00100aa8   48c1fd03             SAR         RBP,0x3\n.text:00100aac   e867fbffff           CALL        _init                                        ; int _init(EVP_PKEY_CTX * ctx)\n.text:00100ab1   4885ed               TEST        RBP,RBP\n.text:00100ab4   7420                 JZ          LAB_00100ad6\n.text:00100ab6   31db                 XOR         EBX,EBX\n.text:00100ab8   0f1f840000000000     NOP         dword ptr [RAX + RAX*0x1]\n                                  LAB_00100ac0:\n.text:00100ac0   4c89fa               MOV         RDX,R15\n.text:00100ac3   4c89f6               MOV         RSI,R14\n.text:00100ac6   4489ef               MOV         EDI,R13D\n.text:00100ac9   41ff14dc             CALL        qword ptr [R12 + RBX*0x8]\u003d\u003e-\u003eframe_dummy     ; undefined __do_global_dtors_aux(), undefined frame_dummy(), \u003d 001007a0, \u003d 00100760\n.text:00100acd   4883c301             ADD         RBX,0x1\n.text:00100ad1   4839dd               CMP         RBP,RBX\n.text:00100ad4   75ea                 JNZ         LAB_00100ac0\n                                  LAB_00100ad6:\n.text:00100ad6   4883c408             ADD         RSP,0x8\n.text:00100ada   5b                   POP         RBX\n.text:00100adb   5d                   POP         RBP\n.text:00100adc   415c                 POP         R12\n.text:00100ade   415d                 POP         R13\n.text:00100ae0   415e                 POP         R14\n.text:00100ae2   415f                 POP         R15\n.text:00100ae4   c3                   RET\n",
  "_init": "; int __stdcall _init(EVP_PKEY_CTX * ctx)\n; Parameters:\n; ctx            EVP_PKEY_CTX * RDI\n; Stack variables:\n                                  _init:\n.init:00100618   4883ec08             SUB         RSP,0x8\n.init:0010061c   488b05c5092000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::__gmon_start__,qword ptr [-\u003e\u003cEXTERNAL\u003e::__gmon_start__]     ; \u003d ??, \u003d 00302030\n.init:00100623   4885c0               TEST        RAX,RAX\n.init:00100626   7402                 JZ          LAB_0010062a\n.init:00100628   ffd0                 CALL        RAX\u003d\u003e\u003cEXTERNAL\u003e::__gmon_start__              ; undefined __gmon_start__()\n                                  LAB_0010062a:\n.init:0010062a   4883c408             ADD         RSP,0x8\n.init:0010062e   c3                   RET\n",
  "_start": "; undefined processEntry _start()\n; Parameters:\n; Stack variables:\n; local_10       undefined8     -0x10\n                                  _start:\n.text:001006a0   31ed                 XOR         EBP,EBP\n.text:001006a2   4989d1               MOV         R9,RDX\n.text:001006a5   5e                   POP         RSI\n.text:001006a6   4889e2               MOV         RDX,RSP\n.text:001006a9   4883e4f0             AND         RSP,-0x10\n.text:001006ad   50                   PUSH        RAX\n.text:001006ae   54                   PUSH        RSP\u003d\u003elocal_10\n.text:001006af   4c8d053a040000       LEA         R8,[__libc_csu_fini]\n.text:001006b6   488d0dc3030000       LEA         RCX,[__libc_csu_init]\n.text:001006bd   488d3d39010000       LEA         RDI,[main]\n.text:001006c4   ff1516092000         CALL        qword ptr [-\u003e\u003cEXTERNAL\u003e::__libc_start_main]     ; undefined __libc_start_main(), \u003d 00302020\n.text:001006ca   f4                   HLT\n",
  "FUN_00100630": "; undefined FUN_00100630()\n; Parameters:\n; Stack variables:\n                                  FUN_00100630:\n.plt:00100630    ff356a092000         PUSH        qword ptr [PTR_00300fa0]                     ; \u003d 00000000\n.plt:00100636    ff256c092000         JMP         qword ptr [PTR_00300fa8]\n",
  "__gmon_start__": "; undefined __gmon_start__()\n; Parameters:\n; Stack variables:\n                                  __gmon_start__:\nEXTERNAL:00302030                      ??          ??\n",
  "__stack_chk_fail": "; undefined __stack_chk_fail()\n; Parameters:\n; Stack variables:\n                                  __stack_chk_fail:\n.plt:00100650    ff2562092000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__stack_chk_fail]     ; undefined __stack_chk_fail()\n.plt:00100656    6801000000           PUSH        0x1\n.plt:0010065b    e9d0ffffff           JMP         FUN_00100630                                 ; undefined FUN_00100630()\n; undefined __stack_chk_fail()\n; Parameters:\n; Stack variables:\n                                  ; __stack_chk_fail@@GLIBC_2.4\n                                  __stack_chk_fail:\nEXTERNAL:00302010                      ??          ??\n",
  "main": "; undefined main()\n; Parameters:\n; Stack variables:\n; local_10       undefined8     -0x10\n; local_78       undefined1     -0x78\n; local_82       undefined1     -0x82\n; local_83       undefined1     -0x83\n; local_84       undefined1     -0x84\n; local_85       undefined1     -0x85\n; local_86       undefined1     -0x86\n; local_87       undefined1     -0x87\n; local_88       undefined1     -0x88\n; local_89       undefined1     -0x89\n; local_8a       undefined1     -0x8a\n; local_8b       undefined1     -0x8b\n; local_8c       undefined1     -0x8c\n; local_8d       undefined1     -0x8d\n; local_8e       undefined1     -0x8e\n; local_8f       undefined1     -0x8f\n; local_90       undefined1     -0x90\n; local_91       undefined1     -0x91\n; local_92       undefined1     -0x92\n; local_93       undefined1     -0x93\n; local_94       undefined1     -0x94\n; local_95       undefined1     -0x95\n; local_96       undefined1     -0x96\n; local_97       undefined1     -0x97\n; local_98       undefined1     -0x98\n; local_99       undefined1     -0x99\n; local_9a       undefined1     -0x9a\n; local_9b       undefined1     -0x9b\n; local_9c       undefined1     -0x9c\n; local_9d       undefined1     -0x9d\n; local_9e       undefined1     -0x9e\n; local_9f       undefined1     -0x9f\n; local_a0       undefined1     -0xa0\n; local_a1       undefined1     -0xa1\n; local_a2       undefined1     -0xa2\n; local_a3       undefined1     -0xa3\n; local_a4       undefined1     -0xa4\n; local_a5       undefined1     -0xa5\n; local_a6       undefined1     -0xa6\n; local_a7       undefined1     -0xa7\n; local_a8       undefined1     -0xa8\n; local_a9       undefined1     -0xa9\n; local_aa       undefined1     -0xaa\n; local_ab       undefined1     -0xab\n; local_ac       undefined1     -0xac\n; local_ad       undefined1     -0xad\n; local_ae       undefined1     -0xae\n; local_af       undefined1     -0xaf\n; local_b0       undefined1     -0xb0\n; local_b1       undefined1     -0xb1\n; local_b2       undefined1     -0xb2\n; local_b3       undefined1     -0xb3\n; local_b4       undefined1     -0xb4\n; local_b5       undefined1     -0xb5\n; local_b6       undefined1     -0xb6\n; local_b7       undefined1     -0xb7\n; local_b8       undefined1     -0xb8\n; local_b9       undefined1     -0xb9\n; local_ba       undefined1     -0xba\n; local_bb       undefined1     -0xbb\n; local_bc       undefined1     -0xbc\n; local_bd       undefined1     -0xbd\n; local_be       undefined1     -0xbe\n; local_bf       undefined1     -0xbf\n; local_c0       undefined1     -0xc0\n; local_c1       undefined1     -0xc1\n; local_c2       undefined1     -0xc2\n; local_c3       undefined1     -0xc3\n; local_c4       undefined1     -0xc4\n; local_c5       undefined1     -0xc5\n; local_c6       undefined1     -0xc6\n; local_c7       undefined1     -0xc7\n; local_c8       undefined1     -0xc8\n                                  main:\n.text:001007fd   55                   PUSH        RBP\n.text:001007fe   4889e5               MOV         RBP,RSP\n.text:00100801   4881ecc0000000       SUB         RSP,0xc0\n.text:00100808   64488b042528000000     MOV         RAX,qword ptr FS:[0x28]\n.text:00100811   488945f8             MOV         qword ptr [RBP + local_10+0x8],RAX\n.text:00100815   31c0                 XOR         EAX,EAX\n.text:00100817   488d3de6020000       LEA         RDI,[s_Enter_your_password:_00100b04]        ; \u003d \"Enter your password: \"\n.text:0010081e   b800000000           MOV         EAX,0x0\n.text:00100823   e838feffff           CALL        \u003cEXTERNAL\u003e::printf                           ; int printf(char * __format, ...)\n.text:00100828   488d4590             LEA         RAX\u003d\u003elocal_78,[RBP + -0x70]\n.text:0010082c   4889c6               MOV         RSI,RAX\n.text:0010082f   488d3de4020000       LEA         RDI,[DAT_00100b1a]                           ; \u003d 25h    %\n.text:00100836   b800000000           MOV         EAX,0x0\n.text:0010083b   e840feffff           CALL        \u003cEXTERNAL\u003e::__isoc99_scanf                   ; undefined __isoc99_scanf()\n.text:00100840   488d4590             LEA         RAX\u003d\u003elocal_78,[RBP + -0x70]\n.text:00100844   beaaffffff           MOV         ESI,0xffffffaa\n.text:00100849   4889c7               MOV         RDI,RAX\n.text:0010084c   e859ffffff           CALL        xor_transform                                ; undefined xor_transform()\n.text:00100851   c68540ffffffc9       MOV         byte ptr [RBP + local_c8+0x8],0xc9\n.text:00100858   c68541ffffffd9       MOV         byte ptr [RBP + local_c7+0x8],0xd9\n.text:0010085f   c68542ffffffcb       MOV         byte ptr [RBP + local_c6+0x8],0xcb\n.text:00100866   c68543ffffffdd       MOV         byte ptr [RBP + local_c5+0x8],0xdd\n.text:0010086d   c68544ffffffc9       MOV         byte ptr [RBP + local_c4+0x8],0xc9\n.text:00100874   c68545ffffffde       MOV         byte ptr [RBP + local_c3+0x8],0xde\n.text:0010087b   c68546ffffffcc       MOV         byte ptr [RBP + local_c2+0x8],0xcc\n.text:00100882   c68547ffffffd1       MOV         byte ptr [RBP + local_c1+0x8],0xd1\n.text:00100889   c68548ffffff9a       MOV         byte ptr [RBP + local_c0+0x8],0x9a\n.text:00100890   c68549ffffffc4       MOV         byte ptr [RBP + local_bf+0x8],0xc4\n.text:00100897   c6854affffffcf       MOV         byte ptr [RBP + local_be+0x8],0xcf\n.text:0010089e   c6854bfffffff5       MOV         byte ptr [RBP + local_bd+0x8],0xf5\n.text:001008a5   c6854cffffffd9       MOV         byte ptr [RBP + local_bc+0x8],0xd9\n.text:001008ac   c6854dffffffc2       MOV         byte ptr [RBP + local_bb+0x8],0xc2\n.text:001008b3   c6854effffffcf       MOV         byte ptr [RBP + local_ba+0x8],0xcf\n.text:001008ba   c6854fffffffcf       MOV         byte ptr [RBP + local_b9+0x8],0xcf\n.text:001008c1   c68550fffffffa       MOV         byte ptr [RBP + local_b8+0x8],0xfa\n.text:001008c8   c68551fffffff5       MOV         byte ptr [RBP + local_b7+0x8],0xf5\n.text:001008cf   c68552ffffff9b       MOV         byte ptr [RBP + local_b6+0x8],0x9b\n.text:001008d6   c68553ffffffdd       MOV         byte ptr [RBP + local_b5+0x8],0xdd\n.text:001008dd   c68554ffffffc5       MOV         byte ptr [RBP + local_b4+0x8],0xc5\n.text:001008e4   c68555fffffff5       MOV         byte ptr [RBP + local_b3+0x8],0xf5\n.text:001008eb   c68556ffffffd9       MOV         byte ptr [RBP + local_b2+0x8],0xd9\n.text:001008f2   c68557ffffffc2       MOV         byte ptr [RBP + local_b1+0x8],0xc2\n.text:001008f9   c68558ffffffcf       MOV         byte ptr [RBP + local_b0+0x8],0xcf\n.text:00100900   c68559fffffffd       MOV         byte ptr [RBP + local_af+0x8],0xfd\n.text:00100907   c6855affffffda       MOV         byte ptr [RBP + local_ae+0x8],0xda\n.text:0010090e   c6855bfffffff5       MOV         byte ptr [RBP + local_ad+0x8],0xf5\n.text:00100915   c6855cffffff98       MOV         byte ptr [RBP + local_ac+0x8],0x98\n.text:0010091c   c6855dffffffc2       MOV         byte ptr [RBP + local_ab+0x8],0xc2\n.text:00100923   c6855effffffd8       MOV         byte ptr [RBP + local_aa+0x8],0xd8\n.text:0010092a   c6855fffffffcf       MOV         byte ptr [RBP + local_a9+0x8],0xcf\n.text:00100931   c68560ffffffcf       MOV         byte ptr [RBP + local_a8+0x8],0xcf\n.text:00100938   c68561fffffff5       MOV         byte ptr [RBP + local_a7+0x8],0xf5\n.text:0010093f   c68562ffffff9f       MOV         byte ptr [RBP + local_a6+0x8],0x9f\n.text:00100946   c68563ffffffc2       MOV         byte ptr [RBP + local_a5+0x8],0xc2\n.text:0010094d   c68564ffffffcf       MOV         byte ptr [RBP + local_a4+0x8],0xcf\n.text:00100954   c68565ffffffcf       MOV         byte ptr [RBP + local_a3+0x8],0xcf\n.text:0010095b   c68566ffffffc1       MOV         byte ptr [RBP + local_a2+0x8],0xc1\n.text:00100962   c68567ffffffd9       MOV         byte ptr [RBP + local_a1+0x8],0xd9\n.text:00100969   c68568fffffff5       MOV         byte ptr [RBP + local_a0+0x8],0xf5\n.text:00100970   c68569fffffff5       MOV         byte ptr [RBP + local_9f+0x8],0xf5\n.text:00100977   c6856afffffff5       MOV         byte ptr [RBP + local_9e+0x8],0xf5\n.text:0010097e   c6856bfffffff5       MOV         byte ptr [RBP + local_9d+0x8],0xf5\n.text:00100985   c6856cfffffff5       MOV         byte ptr [RBP + local_9c+0x8],0xf5\n.text:0010098c   c6856dffffffd0       MOV         byte ptr [RBP + local_9b+0x8],0xd0\n.text:00100993   c6856efffffff5       MOV         byte ptr [RBP + local_9a+0x8],0xf5\n.text:0010099a   c6856ffffffff5       MOV         byte ptr [RBP + local_99+0x8],0xf5\n.text:001009a1   c68570fffffff5       MOV         byte ptr [RBP + local_98+0x8],0xf5\n.text:001009a8   c68571ffffffd0       MOV         byte ptr [RBP + local_97+0x8],0xd0\n.text:001009af   c68572ffffffd0       MOV         byte ptr [RBP + local_96+0x8],0xd0\n.text:001009b6   c68573ffffffd0       MOV         byte ptr [RBP + local_95+0x8],0xd0\n.text:001009bd   c68574fffffff5       MOV         byte ptr [RBP + local_94+0x8],0xf5\n.text:001009c4   c68575fffffff5       MOV         byte ptr [RBP + local_93+0x8],0xf5\n.text:001009cb   c68576fffffff5       MOV         byte ptr [RBP + local_92+0x8],0xf5\n.text:001009d2   c68577fffffff5       MOV         byte ptr [RBP + local_91+0x8],0xf5\n.text:001009d9   c68578fffffff5       MOV         byte ptr [RBP + local_90+0x8],0xf5\n.text:001009e0   c68579ffffffd0       MOV         byte ptr [RBP + local_8f+0x8],0xd0\n.text:001009e7   c6857affffffd0       MOV         byte ptr [RBP + local_8e+0x8],0xd0\n.text:001009ee   c6857bffffffd0       MOV         byte ptr [RBP + local_8d+0x8],0xd0\n.text:001009f5   c6857cffffffd0       MOV         byte ptr [RBP + local_8c+0x8],0xd0\n.text:001009fc   c6857dffffffd0       MOV         byte ptr [RBP + local_8b+0x8],0xd0\n.text:00100a03   c6857effffffd0       MOV         byte ptr [RBP + local_8a+0x8],0xd0\n.text:00100a0a   c6857ffffffff5       MOV         byte ptr [RBP + local_89+0x8],0xf5\n.text:00100a11   c64580f5             MOV         byte ptr [RBP + local_88+0x8],0xf5\n.text:00100a15   c64581f5             MOV         byte ptr [RBP + local_87+0x8],0xf5\n.text:00100a19   c64582f5             MOV         byte ptr [RBP + local_86+0x8],0xf5\n.text:00100a1d   c64583d2             MOV         byte ptr [RBP + local_85+0x8],0xd2\n.text:00100a21   c64584c5             MOV         byte ptr [RBP + local_84+0x8],0xc5\n.text:00100a25   c64585d8             MOV         byte ptr [RBP + local_83+0x8],0xd8\n.text:00100a29   c64586d7             MOV         byte ptr [RBP + local_82+0x8],0xd7\n.text:00100a2d   488d9540ffffff       LEA         RDX\u003d\u003elocal_c8,[RBP + -0xc0]\n.text:00100a34   488d4590             LEA         RAX\u003d\u003elocal_78,[RBP + -0x70]\n.text:00100a38   4889d6               MOV         RSI,RDX\n.text:00100a3b   4889c7               MOV         RDI,RAX\n.text:00100a3e   e82dfcffff           CALL        \u003cEXTERNAL\u003e::strcmp                           ; int strcmp(char * __s1, char * __s2)\n.text:00100a43   85c0                 TEST        EAX,EAX\n.text:00100a45   750e                 JNZ         LAB_00100a55\n.text:00100a47   488d3dd1000000       LEA         RDI,[s_Correct!_00100b1f]                    ; \u003d \"Correct!\"\n.text:00100a4e   e8edfbffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n.text:00100a53   eb0c                 JMP         LAB_00100a61\n                                  LAB_00100a55:\n.text:00100a55   488d3dcc000000       LEA         RDI,[s_Access_denied._00100b28]              ; \u003d \"Access denied.\"\n.text:00100a5c   e8dffbffff           CALL        \u003cEXTERNAL\u003e::puts                             ; int puts(char * __s)\n                                  LAB_00100a61:\n.text:00100a61   b800000000           MOV         EAX,0x0\n.text:00100a66   488b4df8             MOV         RCX,qword ptr [RBP + local_10+0x8]\n.text:00100a6a   6448330c2528000000     XOR         RCX,qword ptr FS:[0x28]\n.text:00100a73   7405                 JZ          LAB_00100a7a\n.text:00100a75   e8d6fbffff           CALL        \u003cEXTERNAL\u003e::__stack_chk_fail                 ; undefined __stack_chk_fail()\n                                  LAB_00100a7a:\n.text:00100a7a   c9                   LEAVE\n.text:00100a7b   c3                   RET\n",
  "printf": "; int printf(char * __format, ...)\n; Parameters:\n; __format       char *         RDI\n; Stack variables:\n                                  printf:\n.plt:00100660    ff255a092000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::printf]             ; int printf(char * __format, ...)\n.plt:00100666    6802000000           PUSH        0x2\n.plt:0010066b    e9c0ffffff           JMP         FUN_00100630                                 ; undefined FUN_00100630()\n; int printf(char * __format, ...)\n; Parameters:\n; __format       char *         RDI\n; Stack variables:\n                                  ; printf@@GLIBC_2.2.5\n                                  printf:\nEXTERNAL:00302018                      ??          ??\n",
  "puts": "; int puts(char * __s)\n; Parameters:\n; __s            char *         RDI\n; Stack variables:\n                                  puts:\n.plt:00100640    ff256a092000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::puts]               ; int puts(char * __s)\n.plt:00100646    6800000000           PUSH        0x0\n.plt:0010064b    e9e0ffffff           JMP         FUN_00100630                                 ; undefined FUN_00100630()\n; int puts(char * __s)\n; Parameters:\n; __s            char *         RDI\n; Stack variables:\n                                  ; puts@@GLIBC_2.2.5\n                                  puts:\nEXTERNAL:00302008                      ??          ??\n",
  "deregister_tm_clones": "; undefined deregister_tm_clones()\n; Parameters:\n; Stack variables:\n                                  deregister_tm_clones:\n.text:001006d0   488d3d39092000       LEA         RDI,[completed.7698]                         ; \u003d ??\n.text:001006d7   55                   PUSH        RBP\n.text:001006d8   488d0531092000       LEA         RAX,[completed.7698]                         ; \u003d ??\n.text:001006df   4839f8               CMP         RAX,RDI\n.text:001006e2   4889e5               MOV         RBP,RSP\n.text:001006e5   7419                 JZ          LAB_00100700\n.text:001006e7   488b05ea082000       MOV         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable,qword ptr [-\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable]     ; \u003d ??, \u003d 00302000\n.text:001006ee   4885c0               TEST        RAX,RAX\n.text:001006f1   740d                 JZ          LAB_00100700\n.text:001006f3   5d                   POP         RBP\n.text:001006f4   ffe0                 JMP         RAX\u003d\u003e\u003cEXTERNAL\u003e::_ITM_deregisterTMCloneTable     ; undefined _ITM_deregisterTMCloneTable()\n                                  LAB_00100700:\n.text:00100700   5d                   POP         RBP\n.text:00100701   c3                   RET\n",
  "__libc_csu_fini": "; undefined __libc_csu_fini()\n; Parameters:\n; Stack variables:\n                                  __libc_csu_fini:\n.text:00100af0   f3c3                 RET\n",
  "__isoc99_scanf": "; undefined __isoc99_scanf()\n; Parameters:\n; Stack variables:\n                                  __isoc99_scanf:\n.plt:00100680    ff254a092000         JMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__isoc99_scanf]     ; undefined __isoc99_scanf()\n.plt:00100686    6804000000           PUSH        0x4\n.plt:0010068b    e9a0ffffff           JMP         FUN_00100630                                 ; undefined FUN_00100630()\n; undefined __isoc99_scanf()\n; Parameters:\n; Stack variables:\n                                  ; __isoc99_scanf@@GLIBC_2.7\n                                  __isoc99_scanf:\nEXTERNAL:00302038                      ??          ??\n",
  "__libc_start_main": "; undefined __libc_start_main()\n; Parameters:\n; Stack variables:\n                                  ; __libc_start_main@@GLIBC_2.2.5\n                                  __libc_start_main:\nEXTERNAL:00302020                      ??          ??\n",
  "__do_global_dtors_aux": "; undefined __do_global_dtors_aux()\n; Parameters:\n; Stack variables:\n                                  __do_global_dtors_aux:\n.text:00100760   803da908200000       CMP         byte ptr [completed.7698],0x0                ; \u003d ??\n.text:00100767   752f                 JNZ         LAB_00100798\n.text:00100769   48833d8708200000     CMP         qword ptr [-\u003e\u003cEXTERNAL\u003e::__cxa_finalize],0x0     ; \u003d 00302048\n.text:00100771   55                   PUSH        RBP\n.text:00100772   4889e5               MOV         RBP,RSP\n.text:00100775   740c                 JZ          LAB_00100783\n.text:00100777   488b3d8a082000       MOV         RDI,qword ptr [-\u003e__dso_handle]               ; \u003d 00301008\n.text:0010077e   e80dffffff           CALL        \u003cEXTERNAL\u003e::__cxa_finalize                   ; undefined __cxa_finalize()\n                                  LAB_00100783:\n.text:00100783   e848ffffff           CALL        deregister_tm_clones                         ; undefined deregister_tm_clones()\n.text:00100788   c6058108200001       MOV         byte ptr [completed.7698],0x1                ; \u003d ??\n.text:0010078f   5d                   POP         RBP\n.text:00100790   c3                   RET\n                                  LAB_00100798:\n.text:00100798   f3c3                 RET\n",
  "_fini": "; undefined _fini()\n; Parameters:\n; Stack variables:\n                                  _fini:\n.fini:00100af4   4883ec08             SUB         RSP,0x8\n.fini:00100af8   4883c408             ADD         RSP,0x8\n.fini:00100afc   c3                   RET\n",
  "_ITM_deregisterTMCloneTable": "; undefined _ITM_deregisterTMCloneTable()\n; Parameters:\n; Stack variables:\n                                  _ITM_deregisterTMCloneTable:\nEXTERNAL:00302000                      ??          ??\n",
  "frame_dummy": "; undefined frame_dummy()\n; Parameters:\n; Stack variables:\n                                  frame_dummy:\n.text:001007a0   55                   PUSH        RBP\n.text:001007a1   4889e5               MOV         RBP,RSP\n.text:001007a4   5d                   POP         RBP\n.text:001007a5   e966ffffff           JMP         register_tm_clones                           ; undefined register_tm_clones()\n",
  "_ITM_registerTMCloneTable": "; undefined _ITM_registerTMCloneTable()\n; Parameters:\n; Stack variables:\n                                  _ITM_registerTMCloneTable:\nEXTERNAL:00302040                      ??          ??\n"
}